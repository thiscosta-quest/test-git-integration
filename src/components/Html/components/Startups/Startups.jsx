/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button, Link } from '@mui/material';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';
import useStartups from 'components/Startups/useStartups';

const ScreenDesktop = styled('div')({
  backgroundColor: `rgba(23, 23, 23, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
});

const HeroBg = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  backgroundImage: `url(./assets/images/img/imgtest/Startups_heroBG.png)`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `sticky`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
  top: `0`,
  zIndex: `3000`,
}));

const HeroContent = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `40px 0px 0px 0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const HeroDesktop = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `80px 180px 0px 72px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    margin: `0px`,
    overflow: `hidden`,
    width: 'unset',
  }))
);

const HeroAll = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const HeroContent1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px 60px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px`,
  }))
);

const ActionsIcon = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `34px`,
    width: `34px`,
    margin: `0px`,
  }))
);

const HeroTitle = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px 0px 0px 13px`,
    width: 'unset',
  }))
);

const TheBetterWayFor = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `110px`,
    letterSpacing: `-3px`,
    textDecoration: `none`,
    lineHeight: `100px`,
    textTransform: `none`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? 'unset'
        : data.currentVariant === 'ScreenMobile'
        ? 'unset'
        : `stretch`,
    margin: `0px`,
    width: 'unset',
  }))
);

const NeoFromQuestAiEm = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `24px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `32px`,
    textTransform: `none`,
    width: `713px`,
    margin: `16px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? `stretch` : 'unset',
  }))
);

const Sec2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px 180px 30px 180px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `50px 0px 0px 0px`,
  }))
);

const Divider = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(46, 46, 46, 1)`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? 'unset' : `stretch`,
    height: `2px`,
    margin: `0px`,
    width: 'unset',
  }))
);

const Frame126 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `62px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? `stretch` : 'unset',
    width: 'unset',
  }))
);

const TheProblem = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `center`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `52px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `54px`,
    textTransform: `none`,
    width: `762px`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const Sec21 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `1080px`,
    margin: `30px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const TheProblem1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    margin: `0px`,
    width: 'unset',
  }))
);

const Problems = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `1080px`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const BuildBoldPoints = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    margin: `0px`,
    width: 'unset',
  }))
);

const Card1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    border: `1px solid rgba(255, 255, 255, 0.2)`,
    boxSizing: `border-box`,
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `8px`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px`,
    overflow: `hidden`,
    width: 'unset',
  }))
);

const Card = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `24px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const IconTeam = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `38px`,
    width: `40px`,
    margin: `0px`,
  }))
);

const MakeExisting = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(217, 209, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `24px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `272px`,
    margin: `12px 0px 0px 0px`,
  }))
);

const MakeExisting1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  }))
);

const Card2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    border: `1px solid rgba(255, 255, 255, 0.2)`,
    boxSizing: `border-box`,
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `8px`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px 0px 0px 30px`,
    overflow: `hidden`,
    width: 'unset',
  }))
);

const Card3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `24px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const IconTimeline = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `36px`,
    width: `52px`,
    margin: `0px`,
  }))
);

const MakeExisting2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(217, 209, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `24px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  }))
);

const MakeExisting3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  }))
);

const Card31 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    border: `1px solid rgba(255, 255, 255, 0.2)`,
    boxSizing: `border-box`,
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `8px`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px 0px 0px 30px`,
    overflow: `hidden`,
    width: 'unset',
  }))
);

const Card4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `24px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const TeamIcon = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `33.5px`,
    width: `35.25px`,
    margin: `0px`,
  }))
);

const MakeExisting4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(217, 209, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `24px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `276px`,
    margin: `12px 0px 0px 0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const MakeExisting5 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `18px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    width: `276px`,
    margin: `12px 0px 0px 0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const Sec3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage: `url(./assets/images/img/imgtest/Startups_sec_3.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px 180px 30px 180px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    margin: `50px 0px 0px 0px`,
    width: 'unset',
  }))
);

const Divider1 = styled('div')({
  backgroundColor: `rgba(46, 46, 46, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `2px`,
  margin: `0px`,
});

const Statement = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `62px 0px 0px 0px`,
  }))
);

const QuestIsChangingTheGa = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `center`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `90px`,
    letterSpacing: `-1px`,
    textDecoration: `none`,
    lineHeight: `92px`,
    textTransform: `none`,
    background:
      data.currentVariant === 'ScreenTablet'
        ? `linear-gradient(-90deg, rgba(254, 136, 136, 1) 27.16229514331244%, rgba(128, 102, 255, 1) 97.8620029592611%)`
        : data.currentVariant === 'ScreenMobile'
        ? `linear-gradient(-90deg, rgba(254, 136, 136, 1) 27.16229514331244%, rgba(128, 102, 255, 1) 97.8620029592611%)`
        : `linear-gradient(-90deg, rgba(254, 136, 136, 1) 27.16229514331244%, rgba(128, 102, 255, 1) 97.86200295926109%)`,
    backgroundClip: `text`,
    WebkitBackgroundClip: `text`,
    WebkitTextFillColor: `transparent`,
    height: `204px`,
    width: `654px`,
    margin: `0px`,
  }))
);

const FrontEndSubtitle = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `center`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `24px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `32px`,
    textTransform: `none`,
    width: `764px`,
    margin: `14px 0px 0px 0px`,
  }))
);

const Sec4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px 180px 20px 180px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `50px 0px 0px 0px`,
  }))
);

const Divider2 = styled('div')({
  backgroundColor: `rgba(46, 46, 46, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `2px`,
  margin: `0px`,
});

const TheProblem2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `center`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `42px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `42px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `62px 0px 0px 0px`,
  }))
);

const Bullets = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `1010px`,
    margin: `62px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const BulletsRow = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const BulletPoint1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `220px`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const Icons = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `10px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const Figma = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `56px`,
    width: `37.34px`,
    objectFit: `cover`,
    margin: `0px`,
  }))
);

const Logo2 = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `60px`,
    width: `60px`,
    objectFit: `cover`,
    margin: `0px 0px 0px 24px`,
  }))
);

const Github = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `56px`,
    width: `56px`,
    objectFit: `cover`,
    margin: `0px 0px 0px 24px`,
  }))
);

const TheProblem3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `12px 0px 0px 0px`,
  }))
);

const TheProblem4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `30px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const BulletPoint2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `220px`,
    margin: `0px 0px 0px 31px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const Icons1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `10px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const Js = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `48px`,
    width: `48px`,
    objectFit: `cover`,
    margin: `0px`,
  }))
);

const Ts = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `48px`,
    width: `48px`,
    objectFit: `cover`,
    margin: `0px 0px 0px 24px`,
  }))
);

const React1 = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `52.17px`,
    width: `60px`,
    objectFit: `cover`,
    margin: `0px 0px 0px 24px`,
  }))
);

const Next = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `64px`,
    width: `105.35px`,
    objectFit: `contain`,
    margin: `0px 0px 0px 24px`,
  }))
);

const TheProblem5 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px 10px 0px 0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `12px 0px 0px 0px`,
  }))
);

const TheProblem6 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `30px`,
    textTransform: `none`,
    width: `293px`,
    margin: `0px`,
  }))
);

const BulletsRow1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `30px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
    overflow: 'unset',
  }))
);

const BulletsRow2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `200px`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const TheProblem7 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `238px`,
    margin: `0px`,
  }))
);

const TheProblem8 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const ForAgencies = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `26px`,
    textTransform: `none`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? 'unset'
        : data.currentVariant === 'ScreenMobile'
        ? 'unset'
        : `stretch`,
    margin: `8px 0px 0px 0px`,
    width: 'unset',
  }))
);

const Devices = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `13.921879768371582px 0px`,
    boxSizing: `border-box`,
    margin: `0px`,
    width: 'unset',
  }))
);

const Mobile = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `59.3px`,
    width: `35.58px`,
    margin: `0px`,
  }))
);

const Tablet = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `71.16px`,
    width: `53.37px`,
    margin: `0px 0px 0px 18px`,
  }))
);

const Desktop = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `56.33px`,
    width: `71.16px`,
    margin: `0px 0px 0px 18px`,
  }))
);

const BulletPoint11 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `5.940593719482422px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `200px`,
    margin: `0px 0px 0px 31px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const TurboIcon = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `70px`,
    width: `70px`,
    margin: `0px`,
  }))
);

const TheProblem9 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px 0px 0px 30px`,
  }))
);

const TheProblem10 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const ForAgencies1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `26px`,
    textTransform: `none`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? 'unset'
        : data.currentVariant === 'ScreenMobile'
        ? 'unset'
        : `stretch`,
    margin: `5.940593719482422px 0px 0px 0px`,
    width: 'unset',
  }))
);

const BulletsRow3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `30px 0px 0px 0px`,
  }))
);

const BulletPoint4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `378px`,
    margin: `0px`,
    overflow: `hidden`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const ImgWorkspaces = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `206px`,
    width: `446px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? 'unset' : `stretch`,
    margin: `0px`,
  }))
);

const TheProblem11 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `20px 0px 0px 0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const TheProblem12 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const ForAgencies2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `26px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `7px 0px 0px 0px`,
  }))
);

const BulletPoint6 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `30px 22px`,
    boxSizing: `border-box`,
    width: `490px`,
    height: `378px`,
    margin: `0px 0px 0px 30px`,
    overflow: `hidden`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const ScreenShot20220922At = animated(
  styled('img', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    height: `171px`,
    width: `213px`,
    objectFit: `cover`,
    margin: `0px`,
  }))
);

const ZebraT = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage: `url(./assets/images/img/imgtest/Startups_zebra_t.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `123.56px`,
    margin: `0px`,
  }))
);

const ZebraM = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage: `url(./assets/images/img/imgtest/Startups_zebra_m.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `145px`,
    margin: `0px`,
  }))
);

const TheProblem13 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `20px 0px 0px 0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const TheProblem14 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `28px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const ForAgencies3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `-0.4000000059604645px`,
    textDecoration: `none`,
    lineHeight: `26px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `7px 0px 0px 0px`,
  }))
);

const Banner = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `19px 216px 0px 216px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    margin: `50px 0px 0px 0px`,
    width: 'unset',
  }))
);

const SpecialPricing = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(112.64deg, rgba(124, 106, 255, 1) 25.597602025174897%, rgba(6, 193, 255, 1) 91.28342279060706%)`,
    borderRadius: `10px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `26px 40px`,
    boxSizing: `border-box`,
    width: `1008px`,
    margin: `0px`,
    height: 'unset',
    flexGrow: 'unset',
  }))
);

const TheProblem15 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? 'unset' : `stretch`,
    width: `713px`,
    margin: `0px`,
    flexGrow: 'unset',
  }))
);

const TheProblem16 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `26px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `32px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const ForAgencies4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `26px`,
    textTransform: `none`,
    width: `570px`,
    margin: `6px 0px 0px 0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const ButtonOutlined = animated(
  styled(Button, {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    margin: `0px 0px 0px 32px`,
    alignSelf: data.currentVariant === 'ScreenTablet' ? `stretch` : 'unset',
    height: 'unset',
  }))
);

const Samples = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `80px 180px`,
    boxSizing: `border-box`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? 'unset'
        : data.currentVariant === 'ScreenMobile'
        ? 'unset'
        : `stretch`,
    margin: `50px 0px 0px 0px`,
    width: 'unset',
  }))
);

const Box = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    border: `2px solid rgba(46, 46, 46, 1)`,
    boxSizing: `border-box`,
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `40px`,
    width: `1080px`,
    margin: `0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const SamplesContent = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const LeftSide = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const Subtitle = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const ActionsIcon1 = styled('img')({
  height: `14px`,
  width: `14px`,
  margin: `0px`,
});

const NewWay = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Visby CF`,
  fontWeight: `700`,
  fontSize: `12px`,
  letterSpacing: `2px`,
  textDecoration: `none`,
  lineHeight: `30px`,
  textTransform: `uppercase`,
  width: `417px`,
  margin: `0px 0px 0px 8px`,
});

const TryItHeadline = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px 0px 20px 0px`,
    boxSizing: `border-box`,
    margin: `20px 0px 0px 0px`,
  }))
);

const SeeHow = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Frame125 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const TakeDesignToLaunc = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `44px`,
    letterSpacing: `-2px`,
    textDecoration: `none`,
    lineHeight: `42px`,
    textTransform: `none`,
    margin: `0px`,
  }))
);

const TakeDesignToLaunc1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `44px`,
    letterSpacing: `-2px`,
    textDecoration: `none`,
    lineHeight: `42px`,
    textTransform: `none`,
    background:
      data.currentVariant === 'ScreenTablet'
        ? `linear-gradient(-90deg, rgba(254, 136, 136, 1) 27.16229514331245%, rgba(128, 102, 255, 1) 97.86200295926109%)`
        : `linear-gradient(-90deg, rgba(254, 136, 136, 1) 27.16229514331244%, rgba(128, 102, 255, 1) 97.86200295926109%)`,
    backgroundClip: `text`,
    WebkitBackgroundClip: `text`,
    WebkitTextFillColor: `transparent`,
    margin: `0px`,
    width: 'unset',
  }))
);

const LearnMore = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `18px 0px 0px 0px`,
  }))
);

const About = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `30px`,
    textTransform: `none`,
    margin: `0px`,
  }))
);

const Link1 = animated(
  styled(Link, {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    color: `rgba(254, 136, 136, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `30px`,
    textTransform: `none`,
    margin: `0px 0px 0px 5px`,
  }))
);

const RightSide = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-end`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    height: `140px`,
    margin: `0px 0px 0px 24px`,
    width: 'unset',
  }))
);

const Image1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(180deg, rgba(254, 254, 254, 1) -3.0616171314629196e-15%, rgba(157, 157, 157, 1) 99.99999999999997%)`,
    borderRadius: `8px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `8px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px`,
    overflow: `hidden`,
  }))
);

const Thumb = styled('div')({
  backgroundImage: `url(./assets/images/img/imgtest/Startups_thumb.png)`,
  backgroundPosition: `center`,
  backgroundSize: `contain`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const Image2 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -3.0616171314629196e-15%, rgba(151, 151, 151, 1) 99.99999999999997%)`,
    borderRadius: `8px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `8px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px 0px 0px 24px`,
    overflow: `hidden`,
  }))
);

const Thumb1 = styled('div')({
  backgroundImage: `url(./assets/images/img/imgtest/Startups_thumb_1.png)`,
  backgroundPosition: `center`,
  backgroundSize: `contain`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const Image3 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -3.0616171314629196e-15%, rgba(151, 151, 151, 1) 99.99999999999997%)`,
    borderRadius: `12px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `10px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    flexGrow: `1`,
    margin: `0px 0px 0px 24px`,
    overflow: `hidden`,
  }))
);

const Thumb2 = styled('div')({
  backgroundImage: `url(./assets/images/img/imgtest/Startups_thumb_2.png)`,
  backgroundPosition: `center`,
  backgroundSize: `contain`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const DiscoverSec = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage: `url(./assets/images/img/imgtest/Startups_Discover_Sec.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `90px 180px 0px 180px`,
    boxSizing: `border-box`,
    alignSelf: data.currentVariant === 'ScreenMobile' ? 'unset' : `stretch`,
    margin: `50px 0px 0px 0px`,
    width: 'unset',
  }))
);

const Frame127 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px 100px 0px 0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
  }))
);

const Frame1261 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
    width: 'unset',
    alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
  }))
);

const Subtitle1 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const ActionsIcon2 = styled('img')({
  height: `14px`,
  width: `12.95px`,
  margin: `0px`,
});

const NeoFromQuestAiEm1 = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Visby CF`,
  fontWeight: `700`,
  fontSize: `12px`,
  letterSpacing: `2px`,
  textDecoration: `none`,
  lineHeight: `30px`,
  textTransform: `uppercase`,
  width: `385.7px`,
  margin: `0px 0px 0px 6px`,
});

const DiscoverTheSpan1 = animated(
  styled('span', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `64px`,
    letterSpacing: `-1px`,
    textDecoration: `none`,
    lineHeight: `56px`,
    textTransform: `none`,
    textAlign: 'unset',
    alignSelf: 'unset',
    margin: 'unset',
  }))
);

const DiscoverTheSpan2 = animated(
  styled('span', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    whiteSpace: `pre-wrap`,
    color: `rgba(254, 136, 136, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `64px`,
    letterSpacing: `-1px`,
    textDecoration: `none`,
    lineHeight: `56px`,
    textTransform: `none`,
    textAlign: 'unset',
    alignSelf: 'unset',
    margin: 'unset',
  }))
);

const DiscoverTheSpan3 = animated(
  styled('span', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `64px`,
    letterSpacing: `-1px`,
    textDecoration: `none`,
    lineHeight: `56px`,
    textTransform: `none`,
    textAlign: 'unset',
    alignSelf: 'unset',
    margin: 'unset',
  }))
);

const DiscoverThe = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Articulat CF`,
    fontWeight: `700`,
    fontSize: `64px`,
    letterSpacing: `-1px`,
    textDecoration: `none`,
    lineHeight: `56px`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `24px 0px 0px 0px`,
  }))
);

const ImportYourDifferen = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `30px`,
    textTransform: `none`,
    width: `622.49px`,
    margin: `24px 0px 0px 0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const LearnMore1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `980px`,
    margin: `24px 0px 0px 0px`,
    alignSelf:
      data.currentVariant === 'ScreenTablet'
        ? `stretch`
        : data.currentVariant === 'ScreenMobile'
        ? `stretch`
        : 'unset',
  }))
);

const About1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(255, 255, 255, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    textDecoration: `none`,
    lineHeight: `30px`,
    textTransform: `none`,
    margin: `0px`,
  }))
);

const Link2 = animated(
  styled(Link, {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    color: `rgba(254, 136, 136, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `30px`,
    textTransform: `none`,
    margin: `0px 0px 0px 5px`,
  }))
);

const ButtonOutlined1 = styled(Button)({
  margin: `24px 0px 0px 0px`,
});

const BtmImage = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `50px 0px 0px 0px`,
  }))
);

const Sec4Image = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage: `url(./assets/images/img/imgtest/Startups_sec4_Image.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    height: `512px`,
    width: `1440px`,
    margin: `0px`,
  }))
);

function Startups(props) {
  const { data, fns } = useStartups();

  const HeroContentScreenDesktop = { padding: `40px 0px 0px 0px` };
  const HeroContentScreenTablet = { padding: `40px 0px 0px 0px` };
  const HeroContentScreenMobile = { padding: `0px 0px 0px 0px` };
  const [HeroContentStateStyles, HeroContentStateApi] = useSpring(() => ({
    from: eval('HeroContent' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const HeroDesktopScreenDesktop = {
    padding: `80px 180px 0px 72px`,
    width: '1440px',
  };
  const HeroDesktopScreenTablet = {
    padding: `71.875px 40px 0px 40px`,
    width: `690px`,
  };
  const HeroDesktopScreenMobile = {
    padding: `71.875px 10px 0px 18px`,
    width: 'unset',
  };
  const [HeroDesktopStateStyles, HeroDesktopStateApi] = useSpring(() => ({
    from: eval('HeroDesktop' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const HeroContent1ScreenDesktop = {
    flexDirection: `row`,
    padding: `0px 60px`,
    flexGrow: `1`,
  };
  const HeroContent1ScreenTablet = {
    flexDirection: `row`,
    padding: `0px 0px`,
    flexGrow: `1`,
  };
  const HeroContent1ScreenMobile = {
    flexDirection: `column`,
    padding: `0px 0px`,
    flexGrow: `0`,
  };
  const [HeroContent1StateStyles, HeroContent1StateApi] = useSpring(() => ({
    from: eval('HeroContent1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ActionsIconScreenDesktop = { height: `34px`, width: `34px` };
  const ActionsIconScreenTablet = { height: `22px`, width: `22px` };
  const ActionsIconScreenMobile = { height: `22px`, width: `22px` };
  const [ActionsIconStateStyles, ActionsIconStateApi] = useSpring(() => ({
    from: eval('ActionsIcon' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const HeroTitleScreenDesktop = {
    flexGrow: `1`,
    margin: `0px 0px 0px 13px`,
    width: '1021px',
  };
  const HeroTitleScreenTablet = {
    flexGrow: `1`,
    margin: `0px 0px 0px 11.6796875px`,
    width: 'unset',
  };
  const HeroTitleScreenMobile = {
    flexGrow: `0`,
    margin: `12px 0px 0px 0px`,
    width: `263px`,
  };
  const [HeroTitleStateStyles, HeroTitleStateApi] = useSpring(() => ({
    from: eval('HeroTitle' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheBetterWayForScreenDesktop = {
    fontSize: `110px`,
    letterSpacing: `-3px`,
    lineHeight: `100px`,
    width: '1021px',
  };
  const TheBetterWayForScreenTablet = {
    fontSize: `56px`,
    letterSpacing: `-2.6953125px`,
    lineHeight: `52px`,
    width: `503px`,
  };
  const TheBetterWayForScreenMobile = {
    fontSize: `34px`,
    letterSpacing: `-1.7000000476837158px`,
    lineHeight: `35px`,
    width: `263px`,
  };
  const [TheBetterWayForStateStyles, TheBetterWayForStateApi] = useSpring(
    () => ({
      from: eval('TheBetterWayFor' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const NeoFromQuestAiEmScreenDesktop = {
    fontWeight: `600`,
    fontSize: `24px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `32px`,
    width: `713px`,
    margin: `16px 0px 0px 0px`,
  };
  const NeoFromQuestAiEmScreenTablet = {
    fontWeight: `600`,
    fontSize: `20px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `28px`,
    width: '576.32px',
    margin: `6px 0px 0px 0px`,
  };
  const NeoFromQuestAiEmScreenMobile = {
    fontWeight: `700`,
    fontSize: `16px`,
    letterSpacing: `0px`,
    lineHeight: `24px`,
    width: `263px`,
    margin: `12px 0px 0px 0px`,
  };
  const [NeoFromQuestAiEmStateStyles, NeoFromQuestAiEmStateApi] = useSpring(
    () => ({
      from: eval('NeoFromQuestAiEm' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const Sec2ScreenDesktop = {
    padding: `0px 180px 30px 180px`,
    margin: `50px 0px 0px 0px`,
  };
  const Sec2ScreenTablet = {
    padding: `0px 80px 30px 80px`,
    margin: `50px 0px 0px 0px`,
  };
  const Sec2ScreenMobile = {
    padding: `0px 30px 30px 30px`,
    margin: `30px 0px 0px 0px`,
  };
  const [Sec2StateStyles, Sec2StateApi] = useSpring(() => ({
    from: eval('Sec2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const DividerScreenDesktop = { width: '1080px' };
  const DividerScreenTablet = { width: 'unset' };
  const DividerScreenMobile = { width: `256px` };
  const [DividerStateStyles, DividerStateApi] = useSpring(() => ({
    from: eval('Divider' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Frame126ScreenDesktop = { width: '1080px' };
  const Frame126ScreenTablet = { width: 'unset' };
  const Frame126ScreenMobile = { width: `315px` };
  const [Frame126StateStyles, Frame126StateApi] = useSpring(() => ({
    from: eval('Frame126' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblemScreenDesktop = {
    fontSize: `52px`,
    lineHeight: `54px`,
    width: `762px`,
  };
  const TheProblemScreenTablet = {
    fontSize: `48px`,
    lineHeight: `50px`,
    width: `608px`,
  };
  const TheProblemScreenMobile = {
    fontSize: `36px`,
    lineHeight: `34px`,
    width: '315px',
  };
  const [TheProblemStateStyles, TheProblemStateApi] = useSpring(() => ({
    from: eval('TheProblem' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Sec21ScreenDesktop = { alignItems: `flex-start`, width: `1080px` };
  const Sec21ScreenTablet = { alignItems: `center`, width: `608px` };
  const Sec21ScreenMobile = { alignItems: `center`, width: '315px' };
  const [Sec21StateStyles, Sec21StateApi] = useSpring(() => ({
    from: eval('Sec21' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem1ScreenDesktop = {
    alignItems: `flex-start`,
    width: '1080px',
  };
  const TheProblem1ScreenTablet = { alignItems: `center`, width: `608px` };
  const TheProblem1ScreenMobile = { alignItems: `center`, width: 'unset' };
  const [TheProblem1StateStyles, TheProblem1StateApi] = useSpring(() => ({
    from: eval('TheProblem1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ProblemsScreenDesktop = { alignItems: `flex-start`, width: `1080px` };
  const ProblemsScreenTablet = { alignItems: `center`, width: `604.5px` };
  const ProblemsScreenMobile = { alignItems: `center`, width: '315px' };
  const [ProblemsStateStyles, ProblemsStateApi] = useSpring(() => ({
    from: eval('Problems' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BuildBoldPointsScreenDesktop = {
    flexDirection: `row`,
    justifyContent: `flex-start`,
    padding: `0px 0px`,
    width: '1080px',
  };
  const BuildBoldPointsScreenTablet = {
    flexDirection: `row`,
    justifyContent: `center`,
    padding: `0px 0px`,
    width: `604.5px`,
  };
  const BuildBoldPointsScreenMobile = {
    flexDirection: `column`,
    justifyContent: `center`,
    padding: `0px 30px`,
    width: 'unset',
  };
  const [BuildBoldPointsStateStyles, BuildBoldPointsStateApi] = useSpring(
    () => ({
      from: eval('BuildBoldPoints' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const Card1ScreenDesktop = {
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    borderRadius: `12px`,
    padding: `8px`,
    flexGrow: `1`,
    width: '340px',
  };
  const Card1ScreenTablet = {
    background: `linear-gradient(161.16deg, rgba(103, 78, 227, 0.3) -23.29755307795942%, rgba(25, 24, 25, 0.3) 74.84798109612537%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    width: `190.31px`,
  };
  const Card1ScreenMobile = {
    background: `linear-gradient(151.84deg, rgba(103, 78, 227, 0.3) -13.509699111176682%, rgba(25, 24, 25, 0.3) 67.88209956138971%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    width: 'unset',
  };
  const [Card1StateStyles, Card1StateApi] = useSpring(() => ({
    from: eval('Card1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const CardScreenDesktop = { borderRadius: `12px`, padding: `24px` };
  const CardScreenTablet = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const CardScreenMobile = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const [CardStateStyles, CardStateApi] = useSpring(() => ({
    from: eval('Card' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const IconTeamScreenDesktop = { height: `38px`, width: `40px` };
  const IconTeamScreenTablet = { height: `21.27px`, width: `22.39px` };
  const IconTeamScreenMobile = { height: `21.27px`, width: `22.39px` };
  const [IconTeamStateStyles, IconTeamStateApi] = useSpring(() => ({
    from: eval('IconTeam' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExistingScreenDesktop = {
    fontSize: `24px`,
    lineHeight: `28px`,
    width: `272px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExistingScreenTablet = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `152.24px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExistingScreenMobile = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `152.24px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExistingStateStyles, MakeExistingStateApi] = useSpring(() => ({
    from: eval('MakeExisting' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExisting1ScreenDesktop = {
    fontSize: `18px`,
    lineHeight: `28px`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExisting1ScreenTablet = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExisting1ScreenMobile = {
    fontSize: `12px`,
    lineHeight: `16px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExisting1StateStyles, MakeExisting1StateApi] = useSpring(() => ({
    from: eval('MakeExisting1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Card2ScreenDesktop = {
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    borderRadius: `12px`,
    padding: `8px`,
    flexGrow: `1`,
    margin: `0px 0px 0px 30px`,
    width: '340px',
  };
  const Card2ScreenTablet = {
    background: `linear-gradient(161.16deg, rgba(103, 78, 227, 0.3) -23.29755307795942%, rgba(25, 24, 25, 0.3) 74.84798109612537%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    margin: `0px 0px 0px 16.79166603088379px`,
    width: `190.31px`,
  };
  const Card2ScreenMobile = {
    background: `linear-gradient(151.66deg, rgba(103, 78, 227, 0.3) -13.3324808550611%, rgba(25, 24, 25, 0.3) 67.75579545181503%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    margin: `16.79166603088379px 0px 0px 0px`,
    width: 'unset',
  };
  const [Card2StateStyles, Card2StateApi] = useSpring(() => ({
    from: eval('Card2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Card3ScreenDesktop = { borderRadius: `12px`, padding: `24px` };
  const Card3ScreenTablet = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const Card3ScreenMobile = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const [Card3StateStyles, Card3StateApi] = useSpring(() => ({
    from: eval('Card3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const IconTimelineScreenDesktop = { height: `36px`, width: `52px` };
  const IconTimelineScreenTablet = { height: `20.15px`, width: `29.11px` };
  const IconTimelineScreenMobile = { height: `20.15px`, width: `29.11px` };
  const [IconTimelineStateStyles, IconTimelineStateApi] = useSpring(() => ({
    from: eval('IconTimeline' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExisting2ScreenDesktop = {
    fontSize: `24px`,
    lineHeight: `28px`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExisting2ScreenTablet = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExisting2ScreenMobile = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExisting2StateStyles, MakeExisting2StateApi] = useSpring(() => ({
    from: eval('MakeExisting2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExisting3ScreenDesktop = {
    fontSize: `18px`,
    lineHeight: `28px`,
    width: `248px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExisting3ScreenTablet = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExisting3ScreenMobile = {
    fontSize: `12px`,
    lineHeight: `16px`,
    width: `138.81px`,
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExisting3StateStyles, MakeExisting3StateApi] = useSpring(() => ({
    from: eval('MakeExisting3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Card31ScreenDesktop = {
    background: `linear-gradient(157.74deg, rgba(103, 78, 227, 0.3) -19.640600327910505%, rgba(25, 24, 25, 0.3) 72.24802474134826%)`,
    borderRadius: `12px`,
    padding: `8px`,
    flexGrow: `1`,
    margin: `0px 0px 0px 30px`,
    width: '340px',
  };
  const Card31ScreenTablet = {
    background: `linear-gradient(161.16deg, rgba(103, 78, 227, 0.3) -23.29755307795942%, rgba(25, 24, 25, 0.3) 74.84798109612537%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    margin: `0px 0px 0px 16.79166603088379px`,
    width: `190.31px`,
  };
  const Card31ScreenMobile = {
    background: `linear-gradient(151.44deg, rgba(103, 78, 227, 0.3) -13.110239892770947%, rgba(25, 24, 25, 0.3) 67.59780457594916%)`,
    borderRadius: `6.7166666984558105px`,
    padding: `4.477777481079102px`,
    flexGrow: `0`,
    margin: `16.79166603088379px 0px 0px 0px`,
    width: 'unset',
  };
  const [Card31StateStyles, Card31StateApi] = useSpring(() => ({
    from: eval('Card31' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Card4ScreenDesktop = { borderRadius: `12px`, padding: `24px` };
  const Card4ScreenTablet = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const Card4ScreenMobile = {
    borderRadius: `6.7166666984558105px`,
    padding: `13.433333396911621px`,
  };
  const [Card4StateStyles, Card4StateApi] = useSpring(() => ({
    from: eval('Card4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TeamIconScreenDesktop = { height: `33.5px`, width: `35.25px` };
  const TeamIconScreenTablet = { height: `18.75px`, width: `19.73px` };
  const TeamIconScreenMobile = { height: `18.75px`, width: `19.73px` };
  const [TeamIconStateStyles, TeamIconStateApi] = useSpring(() => ({
    from: eval('TeamIcon' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExisting4ScreenDesktop = {
    fontSize: `24px`,
    lineHeight: `28px`,
    width: `276px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExisting4ScreenTablet = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: '154.48px',
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExisting4ScreenMobile = {
    fontSize: `14px`,
    lineHeight: `18px`,
    width: '219.18px',
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExisting4StateStyles, MakeExisting4StateApi] = useSpring(() => ({
    from: eval('MakeExisting4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MakeExisting5ScreenDesktop = {
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `18px`,
    lineHeight: `28px`,
    width: `276px`,
    margin: `12px 0px 0px 0px`,
  };
  const MakeExisting5ScreenTablet = {
    fontFamily: 'unset',
    fontWeight: `400`,
    fontSize: `14px`,
    lineHeight: `18px`,
    width: '154.48px',
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const MakeExisting5ScreenMobile = {
    fontFamily: 'unset',
    fontWeight: `400`,
    fontSize: `12px`,
    lineHeight: `16px`,
    width: '219.18px',
    margin: `6.7166666984558105px 0px 0px 0px`,
  };
  const [MakeExisting5StateStyles, MakeExisting5StateApi] = useSpring(() => ({
    from: eval('MakeExisting5' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Sec3ScreenDesktop = {
    padding: `0px 180px 30px 180px`,
    margin: `50px 0px 0px 0px`,
    width: '1440px',
  };
  const Sec3ScreenTablet = {
    padding: `0px 80px 30px 80px`,
    margin: `50px 0px 0px 0px`,
    width: `768px`,
  };
  const Sec3ScreenMobile = {
    padding: `0px 30px 30px 30px`,
    margin: `30px 0px 0px 0px`,
    width: 'unset',
  };
  const [Sec3StateStyles, Sec3StateApi] = useSpring(() => ({
    from: eval('Sec3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const StatementScreenDesktop = { alignItems: `center` };
  const StatementScreenTablet = { alignItems: `flex-start` };
  const StatementScreenMobile = { alignItems: `center` };
  const [StatementStateStyles, StatementStateApi] = useSpring(() => ({
    from: eval('Statement' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const QuestIsChangingTheGaScreenDesktop = {
    textAlign: `center`,
    fontSize: `90px`,
    letterSpacing: `-1px`,
    lineHeight: `92px`,
    height: `204px`,
    width: `654px`,
  };
  const QuestIsChangingTheGaScreenTablet = {
    textAlign: `left`,
    fontSize: `76px`,
    letterSpacing: `-2px`,
    lineHeight: `74px`,
    height: `157px`,
    width: `608px`,
  };
  const QuestIsChangingTheGaScreenMobile = {
    textAlign: `left`,
    fontSize: `54px`,
    letterSpacing: `-2px`,
    lineHeight: `56px`,
    height: `173px`,
    width: `275px`,
  };
  const [QuestIsChangingTheGaStateStyles, QuestIsChangingTheGaStateApi] =
    useSpring(() => ({
      from: eval('QuestIsChangingTheGa' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    }));

  const FrontEndSubtitleScreenDesktop = {
    textAlign: `center`,
    fontSize: `24px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `32px`,
    width: `764px`,
    margin: `14px 0px 0px 0px`,
  };
  const FrontEndSubtitleScreenTablet = {
    textAlign: `left`,
    fontSize: `20px`,
    letterSpacing: `0px`,
    lineHeight: `26px`,
    width: `538px`,
    margin: `14px 0px 0px 0px`,
  };
  const FrontEndSubtitleScreenMobile = {
    textAlign: `left`,
    fontSize: `16px`,
    letterSpacing: `0px`,
    lineHeight: `22px`,
    width: `275px`,
    margin: `16px 0px 0px 0px`,
  };
  const [FrontEndSubtitleStateStyles, FrontEndSubtitleStateApi] = useSpring(
    () => ({
      from: eval('FrontEndSubtitle' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const Sec4ScreenDesktop = {
    padding: `0px 180px 20px 180px`,
    margin: `50px 0px 0px 0px`,
  };
  const Sec4ScreenTablet = {
    padding: `0px 80px 20px 80px`,
    margin: `50px 0px 0px 0px`,
  };
  const Sec4ScreenMobile = {
    padding: `0px 30px 20px 30px`,
    margin: `30px 0px 0px 0px`,
  };
  const [Sec4StateStyles, Sec4StateApi] = useSpring(() => ({
    from: eval('Sec4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem2ScreenDesktop = {
    fontSize: `42px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `42px`,
    margin: `62px 0px 0px 0px`,
  };
  const TheProblem2ScreenTablet = {
    fontSize: `42px`,
    letterSpacing: `0px`,
    lineHeight: `42px`,
    margin: `42px 0px 0px 0px`,
  };
  const TheProblem2ScreenMobile = {
    fontSize: `32px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `32px`,
    margin: `42px 0px 0px 0px`,
  };
  const [TheProblem2StateStyles, TheProblem2StateApi] = useSpring(() => ({
    from: eval('TheProblem2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletsScreenDesktop = { width: `1010px`, margin: `62px 0px 0px 0px` };
  const BulletsScreenTablet = { width: `609px`, margin: `42px 0px 0px 0px` };
  const BulletsScreenMobile = { width: '315px', margin: `42px 0px 0px 0px` };
  const [BulletsStateStyles, BulletsStateApi] = useSpring(() => ({
    from: eval('Bullets' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletsRowScreenDesktop = { flexDirection: `row` };
  const BulletsRowScreenTablet = { flexDirection: `row` };
  const BulletsRowScreenMobile = { flexDirection: `column` };
  const [BulletsRowStateStyles, BulletsRowStateApi] = useSpring(() => ({
    from: eval('BulletsRow' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletPoint1ScreenDesktop = {
    borderRadius: `10px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `220px`,
  };
  const BulletPoint1ScreenTablet = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `132.65px`,
  };
  const BulletPoint1ScreenMobile = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `132.65px`,
  };
  const [BulletPoint1StateStyles, BulletPoint1StateApi] = useSpring(() => ({
    from: eval('BulletPoint1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const IconsScreenDesktop = { padding: `10px` };
  const IconsScreenTablet = { padding: `6.029703140258789px` };
  const IconsScreenMobile = { padding: `6.029703140258789px` };
  const [IconsStateStyles, IconsStateApi] = useSpring(() => ({
    from: eval('Icons' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const FigmaScreenDesktop = { height: `56px`, width: `37.34px` };
  const FigmaScreenTablet = { height: `33.77px`, width: `22.52px` };
  const FigmaScreenMobile = { height: `33.77px`, width: `22.52px` };
  const [FigmaStateStyles, FigmaStateApi] = useSpring(() => ({
    from: eval('Figma' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Logo2ScreenDesktop = {
    height: `60px`,
    width: `60px`,
    margin: `0px 0px 0px 24px`,
  };
  const Logo2ScreenTablet = {
    height: `36.18px`,
    width: `36.18px`,
    margin: `0px 0px 0px 16px`,
  };
  const Logo2ScreenMobile = {
    height: `36.18px`,
    width: `36.18px`,
    margin: `0px 0px 0px 14px`,
  };
  const [Logo2StateStyles, Logo2StateApi] = useSpring(() => ({
    from: eval('Logo2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const GithubScreenDesktop = {
    height: `56px`,
    width: `56px`,
    margin: `0px 0px 0px 24px`,
  };
  const GithubScreenTablet = {
    height: `33.77px`,
    width: `33.77px`,
    margin: `0px 0px 0px 16px`,
  };
  const GithubScreenMobile = {
    height: `33.77px`,
    width: `33.77px`,
    margin: `0px 0px 0px 14px`,
  };
  const [GithubStateStyles, GithubStateApi] = useSpring(() => ({
    from: eval('Github' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem3ScreenDesktop = { margin: `12px 0px 0px 0px` };
  const TheProblem3ScreenTablet = { margin: `7.23564338684082px 0px 0px 0px` };
  const TheProblem3ScreenMobile = { margin: `7.23564338684082px 0px 0px 0px` };
  const [TheProblem3StateStyles, TheProblem3StateApi] = useSpring(() => ({
    from: eval('TheProblem3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem4ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `30px`,
  };
  const TheProblem4ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `18.089109420776367px`,
  };
  const TheProblem4ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `18.089109420776367px`,
  };
  const [TheProblem4StateStyles, TheProblem4StateApi] = useSpring(() => ({
    from: eval('TheProblem4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletPoint2ScreenDesktop = {
    borderRadius: `10px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `220px`,
    margin: `0px 0px 0px 31px`,
  };
  const BulletPoint2ScreenTablet = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `132.65px`,
    margin: `0px 0px 0px 18.692079544067383px`,
  };
  const BulletPoint2ScreenMobile = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `132.65px`,
    margin: `18.692079544067383px 0px 0px 0px`,
  };
  const [BulletPoint2StateStyles, BulletPoint2StateApi] = useSpring(() => ({
    from: eval('BulletPoint2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Icons1ScreenDesktop = { padding: `10px` };
  const Icons1ScreenTablet = { padding: `6.029703140258789px` };
  const Icons1ScreenMobile = { padding: `6.029703140258789px` };
  const [Icons1StateStyles, Icons1StateApi] = useSpring(() => ({
    from: eval('Icons1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const JsScreenDesktop = { height: `48px`, width: `48px` };
  const JsScreenTablet = { height: `28.94px`, width: `28.94px` };
  const JsScreenMobile = { height: `28.94px`, width: `28.94px` };
  const [JsStateStyles, JsStateApi] = useSpring(() => ({
    from: eval('Js' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TsScreenDesktop = {
    height: `48px`,
    width: `48px`,
    margin: `0px 0px 0px 24px`,
  };
  const TsScreenTablet = {
    height: `28.94px`,
    width: `28.94px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const TsScreenMobile = {
    height: `28.94px`,
    width: `28.94px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const [TsStateStyles, TsStateApi] = useSpring(() => ({
    from: eval('Ts' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const React1ScreenDesktop = {
    height: `52.17px`,
    width: `60px`,
    margin: `0px 0px 0px 24px`,
  };
  const React1ScreenTablet = {
    height: `31.46px`,
    width: `36.18px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const React1ScreenMobile = {
    height: `31.46px`,
    width: `36.18px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const [React1StateStyles, React1StateApi] = useSpring(() => ({
    from: eval('React1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const NextScreenDesktop = {
    height: `64px`,
    width: `105.35px`,
    margin: `0px 0px 0px 24px`,
  };
  const NextScreenTablet = {
    height: `38.59px`,
    width: `63.53px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const NextScreenMobile = {
    height: `38.59px`,
    width: `63.53px`,
    margin: `0px 0px 0px 14.47128677368164px`,
  };
  const [NextStateStyles, NextStateApi] = useSpring(() => ({
    from: eval('Next' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem5ScreenDesktop = {
    padding: `0px 10px 0px 0px`,
    margin: `12px 0px 0px 0px`,
  };
  const TheProblem5ScreenTablet = {
    padding: `0px 6.029703140258789px 0px 0px`,
    margin: `7.23564338684082px 0px 0px 0px`,
  };
  const TheProblem5ScreenMobile = {
    padding: `0px 6.029703140258789px 0px 0px`,
    margin: `7.23564338684082px 0px 0px 0px`,
  };
  const [TheProblem5StateStyles, TheProblem5StateApi] = useSpring(() => ({
    from: eval('TheProblem5' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem6ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `30px`,
    width: `293px`,
  };
  const TheProblem6ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `18.089109420776367px`,
    width: `176.67px`,
  };
  const TheProblem6ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `18.089109420776367px`,
    width: `176.67px`,
  };
  const [TheProblem6StateStyles, TheProblem6StateApi] = useSpring(() => ({
    from: eval('TheProblem6' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletsRow1ScreenDesktop = {
    flexDirection: `row`,
    margin: `30px 0px 0px 0px`,
    overflow: 'unset',
  };
  const BulletsRow1ScreenTablet = {
    flexDirection: `row`,
    margin: `18.089109420776367px 0px 0px 0px`,
    overflow: 'unset',
  };
  const BulletsRow1ScreenMobile = {
    flexDirection: `column`,
    margin: `18px 0px 0px 0px`,
    overflow: `hidden`,
  };
  const [BulletsRow1StateStyles, BulletsRow1StateApi] = useSpring(() => ({
    from: eval('BulletsRow1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletsRow2ScreenDesktop = {
    borderRadius: `10px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `200px`,
  };
  const BulletsRow2ScreenTablet = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `120.59px`,
  };
  const BulletsRow2ScreenMobile = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `120.59px`,
  };
  const [BulletsRow2StateStyles, BulletsRow2StateApi] = useSpring(() => ({
    from: eval('BulletsRow2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem7ScreenDesktop = { width: `238px` };
  const TheProblem7ScreenTablet = { width: `143.51px` };
  const TheProblem7ScreenMobile = { width: `143.51px` };
  const [TheProblem7StateStyles, TheProblem7StateApi] = useSpring(() => ({
    from: eval('TheProblem7' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem8ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `28px`,
  };
  const TheProblem8ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const TheProblem8ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const [TheProblem8StateStyles, TheProblem8StateApi] = useSpring(() => ({
    from: eval('TheProblem8' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ForAgenciesScreenDesktop = {
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `26px`,
    margin: `8px 0px 0px 0px`,
    width: '238px',
  };
  const ForAgenciesScreenTablet = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `4.8237624168396px 0px 0px 0px`,
    width: `134px`,
  };
  const ForAgenciesScreenMobile = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `4.8237624168396px 0px 0px 0px`,
    width: `134px`,
  };
  const [ForAgenciesStateStyles, ForAgenciesStateApi] = useSpring(() => ({
    from: eval('ForAgencies' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const DevicesScreenDesktop = {
    padding: `13.921879768371582px 0px`,
    width: '196.1px',
  };
  const DevicesScreenTablet = {
    padding: `8.394479751586914px 0px`,
    width: 'unset',
  };
  const DevicesScreenMobile = {
    padding: `8.394479751586914px 0px`,
    width: `118.24px`,
  };
  const [DevicesStateStyles, DevicesStateApi] = useSpring(() => ({
    from: eval('Devices' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const MobileScreenDesktop = { height: `59.3px`, width: `35.58px` };
  const MobileScreenTablet = { height: `35.75px`, width: `21.45px` };
  const MobileScreenMobile = { height: `35.75px`, width: `21.45px` };
  const [MobileStateStyles, MobileStateApi] = useSpring(() => ({
    from: eval('Mobile' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TabletScreenDesktop = {
    height: `71.16px`,
    width: `53.37px`,
    margin: `0px 0px 0px 18px`,
  };
  const TabletScreenTablet = {
    height: `42.91px`,
    width: `32.18px`,
    margin: `0px 0px 0px 10.85346508026123px`,
  };
  const TabletScreenMobile = {
    height: `42.91px`,
    width: `32.18px`,
    margin: `0px 0px 0px 10.85346508026123px`,
  };
  const [TabletStateStyles, TabletStateApi] = useSpring(() => ({
    from: eval('Tablet' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const DesktopScreenDesktop = {
    height: `56.33px`,
    width: `71.16px`,
    margin: `0px 0px 0px 18px`,
  };
  const DesktopScreenTablet = {
    height: `33.97px`,
    width: `42.91px`,
    margin: `0px 0px 0px 10.85346508026123px`,
  };
  const DesktopScreenMobile = {
    height: `33.97px`,
    width: `42.91px`,
    margin: `0px 0px 0px 10.85346508026123px`,
  };
  const [DesktopStateStyles, DesktopStateApi] = useSpring(() => ({
    from: eval('Desktop' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletPoint11ScreenDesktop = {
    borderRadius: `5.940593719482422px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `200px`,
    margin: `0px 0px 0px 31px`,
  };
  const BulletPoint11ScreenTablet = {
    borderRadius: `3.5820016860961914px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `120.59px`,
    margin: `0px 0px 0px 18.692079544067383px`,
  };
  const BulletPoint11ScreenMobile = {
    borderRadius: `3.5820016860961914px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `120.59px`,
    margin: `18.692079544067383px 0px 0px 0px`,
  };
  const [BulletPoint11StateStyles, BulletPoint11StateApi] = useSpring(() => ({
    from: eval('BulletPoint11' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TurboIconScreenDesktop = { height: `70px`, width: `70px` };
  const TurboIconScreenTablet = { height: `42.21px`, width: `42.21px` };
  const TurboIconScreenMobile = { height: `42.21px`, width: `42.21px` };
  const [TurboIconStateStyles, TurboIconStateApi] = useSpring(() => ({
    from: eval('TurboIcon' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem9ScreenDesktop = { margin: `0px 0px 0px 30px` };
  const TheProblem9ScreenTablet = { margin: `0px 0px 0px 18px` };
  const TheProblem9ScreenMobile = { margin: `0px 0px 0px 18px` };
  const [TheProblem9StateStyles, TheProblem9StateApi] = useSpring(() => ({
    from: eval('TheProblem9' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem10ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `28px`,
  };
  const TheProblem10ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const TheProblem10ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const [TheProblem10StateStyles, TheProblem10StateApi] = useSpring(() => ({
    from: eval('TheProblem10' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ForAgencies1ScreenDesktop = {
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `26px`,
    margin: `5.940593719482422px 0px 0px 0px`,
    width: '346px',
  };
  const ForAgencies1ScreenTablet = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `3.5820016860961914px 0px 0px 0px`,
    width: `197px`,
  };
  const ForAgencies1ScreenMobile = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `3.5820016860961914px 0px 0px 0px`,
    width: `197px`,
  };
  const [ForAgencies1StateStyles, ForAgencies1StateApi] = useSpring(() => ({
    from: eval('ForAgencies1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletsRow3ScreenDesktop = {
    flexDirection: `row`,
    margin: `30px 0px 0px 0px`,
  };
  const BulletsRow3ScreenTablet = {
    flexDirection: `row`,
    margin: `18.089109420776367px 0px 0px 0px`,
  };
  const BulletsRow3ScreenMobile = {
    flexDirection: `column`,
    margin: `18px 0px 0px 0px`,
  };
  const [BulletsRow3StateStyles, BulletsRow3StateApi] = useSpring(() => ({
    from: eval('BulletsRow3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletPoint4ScreenDesktop = {
    borderRadius: `10px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `378px`,
  };
  const BulletPoint4ScreenTablet = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `240px`,
  };
  const BulletPoint4ScreenMobile = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `240px`,
  };
  const [BulletPoint4StateStyles, BulletPoint4StateApi] = useSpring(() => ({
    from: eval('BulletPoint4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ImgWorkspacesScreenDesktop = { height: `206px`, width: `446px` };
  const ImgWorkspacesScreenTablet = { height: `124.21px`, width: `269.47px` };
  const ImgWorkspacesScreenMobile = { height: `124.21px`, width: `288.47px` };
  const [ImgWorkspacesStateStyles, ImgWorkspacesStateApi] = useSpring(() => ({
    from: eval('ImgWorkspaces' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem11ScreenDesktop = { padding: `20px 0px 0px 0px` };
  const TheProblem11ScreenTablet = {
    padding: `12.059406280517578px 0px 0px 0px`,
  };
  const TheProblem11ScreenMobile = {
    padding: `12.059406280517578px 0px 0px 0px`,
  };
  const [TheProblem11StateStyles, TheProblem11StateApi] = useSpring(() => ({
    from: eval('TheProblem11' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem12ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `28px`,
  };
  const TheProblem12ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const TheProblem12ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const [TheProblem12StateStyles, TheProblem12StateApi] = useSpring(() => ({
    from: eval('TheProblem12' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ForAgencies2ScreenDesktop = {
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `26px`,
    margin: `7px 0px 0px 0px`,
  };
  const ForAgencies2ScreenTablet = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `4.220792293548584px 0px 0px 0px`,
  };
  const ForAgencies2ScreenMobile = {
    fontSize: `12px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `15px`,
    margin: `4.220792293548584px 0px 0px 0px`,
  };
  const [ForAgencies2StateStyles, ForAgencies2StateApi] = useSpring(() => ({
    from: eval('ForAgencies2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BulletPoint6ScreenDesktop = {
    borderRadius: `10px`,
    padding: `30px 22px`,
    width: `490px`,
    height: `378px`,
    margin: `0px 0px 0px 30px`,
  };
  const BulletPoint6ScreenTablet = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: `296px`,
    height: `240px`,
    margin: `0px 0px 0px 18.089109420776367px`,
  };
  const BulletPoint6ScreenMobile = {
    borderRadius: `6.029703140258789px`,
    padding: `18.089109420776367px 13.26534652709961px`,
    width: '315px',
    height: `240px`,
    margin: `18.089109420776367px 0px 0px 0px`,
  };
  const [BulletPoint6StateStyles, BulletPoint6StateApi] = useSpring(() => ({
    from: eval('BulletPoint6' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ScreenShot20220922AtScreenDesktop = { height: `171px`, width: `213px` };
  const ScreenShot20220922AtScreenTablet = {
    height: `103.11px`,
    width: `128.43px`,
  };
  const ScreenShot20220922AtScreenMobile = { height: `137px`, width: `171px` };
  const [ScreenShot20220922AtStateStyles, ScreenShot20220922AtStateApi] =
    useSpring(() => ({
      from: eval('ScreenShot20220922At' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    }));

  const ZebraTScreenDesktop = { height: `123.56px` };
  const ZebraTScreenTablet = { height: `74.51px` };
  const ZebraTScreenMobile = { height: `74.51px` };
  const [ZebraTStateStyles, ZebraTStateApi] = useSpring(() => ({
    from: eval('ZebraT' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ZebraMScreenDesktop = { height: `145px` };
  const ZebraMScreenTablet = { height: `87.43px` };
  const ZebraMScreenMobile = { height: `87.43px` };
  const [ZebraMStateStyles, ZebraMStateApi] = useSpring(() => ({
    from: eval('ZebraM' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem13ScreenDesktop = { padding: `20px 0px 0px 0px` };
  const TheProblem13ScreenTablet = {
    padding: `12.059406280517578px 0px 0px 0px`,
  };
  const TheProblem13ScreenMobile = {
    padding: `12.059406280517578px 0px 0px 0px`,
  };
  const [TheProblem13StateStyles, TheProblem13StateApi] = useSpring(() => ({
    from: eval('TheProblem13' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem14ScreenDesktop = {
    fontSize: `28px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `28px`,
  };
  const TheProblem14ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const TheProblem14ScreenMobile = {
    fontSize: `16px`,
    letterSpacing: `0.05481548234820366px`,
    lineHeight: `16.883169174194336px`,
  };
  const [TheProblem14StateStyles, TheProblem14StateApi] = useSpring(() => ({
    from: eval('TheProblem14' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ForAgencies3ScreenDesktop = {
    fontSize: `18px`,
    letterSpacing: `-0.4000000059604645px`,
    lineHeight: `26px`,
    margin: `7px 0px 0px 0px`,
  };
  const ForAgencies3ScreenTablet = {
    fontSize: `12px`,
    letterSpacing: `-0.24118812382221222px`,
    lineHeight: `15px`,
    margin: `4.220792293548584px 0px 0px 0px`,
  };
  const ForAgencies3ScreenMobile = {
    fontSize: `12px`,
    letterSpacing: `-0.24118812382221222px`,
    lineHeight: `15px`,
    margin: `4.220792293548584px 0px 0px 0px`,
  };
  const [ForAgencies3StateStyles, ForAgencies3StateApi] = useSpring(() => ({
    from: eval('ForAgencies3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BannerScreenDesktop = {
    justifyContent: `center`,
    padding: `19px 216px 0px 216px`,
    margin: `50px 0px 0px 0px`,
    width: '1440px',
  };
  const BannerScreenTablet = {
    justifyContent: `center`,
    padding: `19px 80px 0px 80px`,
    margin: `50px 0px 0px 0px`,
    width: `768px`,
  };
  const BannerScreenMobile = {
    justifyContent: `flex-start`,
    padding: `19px 14px 0px 14px`,
    margin: `30px 0px 0px 0px`,
    width: 'unset',
  };
  const [BannerStateStyles, BannerStateApi] = useSpring(() => ({
    from: eval('Banner' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const SpecialPricingScreenDesktop = {
    background: `linear-gradient(112.64deg, rgba(124, 106, 255, 1) 25.597602025174897%, rgba(6, 193, 255, 1) 91.28342279060706%)`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `26px 40px`,
    width: `1008px`,
    height: '142px',
    flexGrow: `0`,
  };
  const SpecialPricingScreenTablet = {
    background: `linear-gradient(127.22deg, rgba(124, 106, 255, 1) 17.409605226877648%, rgba(6, 193, 255, 1) 95.59283258004572%)`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `26px 26px`,
    width: `608px`,
    height: `156px`,
    flexGrow: 'unset',
  };
  const SpecialPricingScreenMobile = {
    background: `linear-gradient(150.82999999999998deg, rgba(124, 106, 255, 1) -9.761582082576794%, rgba(6, 193, 255, 1) 109.889568441651%)`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `30px 30px`,
    width: '347px',
    height: 'unset',
    flexGrow: `1`,
  };
  const [SpecialPricingStateStyles, SpecialPricingStateApi] = useSpring(() => ({
    from: eval('SpecialPricing' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem15ScreenDesktop = { width: `713px`, flexGrow: `0` };
  const TheProblem15ScreenTablet = { width: '341px', flexGrow: `1` };
  const TheProblem15ScreenMobile = { width: '287px', flexGrow: 'unset' };
  const [TheProblem15StateStyles, TheProblem15StateApi] = useSpring(() => ({
    from: eval('TheProblem15' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TheProblem16ScreenDesktop = { fontSize: `26px`, lineHeight: `32px` };
  const TheProblem16ScreenTablet = { fontSize: `26px`, lineHeight: `32px` };
  const TheProblem16ScreenMobile = { fontSize: `23px`, lineHeight: `24px` };
  const [TheProblem16StateStyles, TheProblem16StateApi] = useSpring(() => ({
    from: eval('TheProblem16' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ForAgencies4ScreenDesktop = {
    fontSize: `18px`,
    letterSpacing: `0.09090909361839294px`,
    lineHeight: `26px`,
    width: `570px`,
  };
  const ForAgencies4ScreenTablet = {
    fontSize: `16px`,
    letterSpacing: `0px`,
    lineHeight: `22px`,
    width: `313px`,
  };
  const ForAgencies4ScreenMobile = {
    fontSize: `14px`,
    letterSpacing: `0px`,
    lineHeight: `20px`,
    width: '287px',
  };
  const [ForAgencies4StateStyles, ForAgencies4StateApi] = useSpring(() => ({
    from: eval('ForAgencies4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ButtonOutlinedScreenDesktop = {
    margin: `0px 0px 0px 32px`,
    height: '52px',
  };
  const ButtonOutlinedScreenTablet = {
    margin: `0px 0px 0px 32px`,
    height: 'unset',
  };
  const ButtonOutlinedScreenMobile = {
    margin: `16px 0px 0px 0px`,
    height: `44px`,
  };
  const [ButtonOutlinedStateStyles, ButtonOutlinedStateApi] = useSpring(() => ({
    from: eval('ButtonOutlined' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const SamplesScreenDesktop = {
    padding: `80px 180px 80px 180px`,
    margin: `50px 0px 0px 0px`,
    width: '1440px',
  };
  const SamplesScreenTablet = {
    padding: `50px 50px 100px 50px`,
    margin: `50px 0px 0px 0px`,
    width: `768px`,
  };
  const SamplesScreenMobile = {
    padding: `0px 14px 40px 14px`,
    margin: `30px 0px 0px 0px`,
    width: `375px`,
  };
  const [SamplesStateStyles, SamplesStateApi] = useSpring(() => ({
    from: eval('Samples' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BoxScreenDesktop = { padding: `40px 40px 40px 40px`, width: `1080px` };
  const BoxScreenTablet = { padding: `50px 30px 30px 30px`, width: '668px' };
  const BoxScreenMobile = { padding: `40px 30px 30px 30px`, width: '347px' };
  const [BoxStateStyles, BoxStateApi] = useSpring(() => ({
    from: eval('Box' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const SamplesContentScreenDesktop = {
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
  };
  const SamplesContentScreenTablet = {
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
  };
  const SamplesContentScreenMobile = {
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `flex-start`,
  };
  const [SamplesContentStateStyles, SamplesContentStateApi] = useSpring(() => ({
    from: eval('SamplesContent' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const LeftSideScreenDesktop = {};
  const LeftSideScreenTablet = {};
  const LeftSideScreenMobile = {};
  const [LeftSideStateStyles, LeftSideStateApi] = useSpring(() => ({
    from: eval('LeftSide' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const SubtitleScreenDesktop = {};
  const SubtitleScreenTablet = {};
  const SubtitleScreenMobile = {};
  const [SubtitleStateStyles, SubtitleStateApi] = useSpring(() => ({
    from: eval('Subtitle' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TryItHeadlineScreenDesktop = { margin: `20px 0px 0px 0px` };
  const TryItHeadlineScreenTablet = { margin: `18px 0px 0px 0px` };
  const TryItHeadlineScreenMobile = { margin: `10px 0px 0px 0px` };
  const [TryItHeadlineStateStyles, TryItHeadlineStateApi] = useSpring(() => ({
    from: eval('TryItHeadline' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const TakeDesignToLauncScreenDesktop = {
    fontSize: `44px`,
    letterSpacing: `-2px`,
  };
  const TakeDesignToLauncScreenTablet = {
    fontSize: `44px`,
    letterSpacing: `-2px`,
  };
  const TakeDesignToLauncScreenMobile = {
    fontSize: `30px`,
    letterSpacing: `-1px`,
  };
  const [TakeDesignToLauncStateStyles, TakeDesignToLauncStateApi] = useSpring(
    () => ({
      from: eval('TakeDesignToLaunc' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const TakeDesignToLaunc1ScreenDesktop = {
    fontSize: `44px`,
    letterSpacing: `-2px`,
    lineHeight: `42px`,
    margin: `0px 0px 0px 0px`,
    width: '160px',
  };
  const TakeDesignToLaunc1ScreenTablet = {
    fontSize: `44px`,
    letterSpacing: `-2px`,
    lineHeight: `42px`,
    margin: `0px 0px 0px 0px`,
    width: `297px`,
  };
  const TakeDesignToLaunc1ScreenMobile = {
    fontSize: `30px`,
    letterSpacing: `0px`,
    lineHeight: `30px`,
    margin: `-7px 0px 0px 0px`,
    width: `130px`,
  };
  const [TakeDesignToLaunc1StateStyles, TakeDesignToLaunc1StateApi] = useSpring(
    () => ({
      from: eval('TakeDesignToLaunc1' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const LearnMoreScreenDesktop = { margin: `18px 0px 0px 0px` };
  const LearnMoreScreenTablet = { margin: `20px 0px 0px 0px` };
  const LearnMoreScreenMobile = { margin: `14px 0px 0px 0px` };
  const [LearnMoreStateStyles, LearnMoreStateApi] = useSpring(() => ({
    from: eval('LearnMore' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const AboutScreenDesktop = { fontSize: `20px` };
  const AboutScreenTablet = { fontSize: `20px` };
  const AboutScreenMobile = { fontSize: `16px` };
  const [AboutStateStyles, AboutStateApi] = useSpring(() => ({
    from: eval('About' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Link1ScreenDesktop = { fontSize: `20px` };
  const Link1ScreenTablet = { fontSize: `20px` };
  const Link1ScreenMobile = { fontSize: `16px` };
  const [Link1StateStyles, Link1StateApi] = useSpring(() => ({
    from: eval('Link1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const RightSideScreenDesktop = {
    flexGrow: `1`,
    height: `140px`,
    margin: `0px 0px 0px 24px`,
    width: '537px',
  };
  const RightSideScreenTablet = {
    flexGrow: `0`,
    height: `108px`,
    margin: `24px 0px 0px 0px`,
    width: `382px`,
  };
  const RightSideScreenMobile = {
    flexGrow: `0`,
    height: `81px`,
    margin: `14px 0px 0px 0px`,
    width: `286px`,
  };
  const [RightSideStateStyles, RightSideStateApi] = useSpring(() => ({
    from: eval('RightSide' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Image1ScreenDesktop = {
    background: `linear-gradient(180deg, rgba(254, 254, 254, 1) -3.0616171314629196e-15%, rgba(157, 157, 157, 1) 99.99999999999997%)`,
    padding: `8px`,
  };
  const Image1ScreenTablet = {
    background: `linear-gradient(180deg, rgba(254, 254, 254, 1) -0.00308524237151522%, rgba(157, 157, 157, 1) 99.99691456725405%)`,
    padding: `8px`,
  };
  const Image1ScreenMobile = {
    background: `linear-gradient(180deg, rgba(254, 254, 254, 1) -0.004113656489262577%, rgba(157, 157, 157, 1) 99.99588600506732%)`,
    padding: `4px`,
  };
  const [Image1StateStyles, Image1StateApi] = useSpring(() => ({
    from: eval('Image1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Image2ScreenDesktop = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -3.0616171314629196e-15%, rgba(151, 151, 151, 1) 99.99999999999997%)`,
    padding: `8px`,
    margin: `0px 0px 0px 24px`,
  };
  const Image2ScreenTablet = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -0.00308524237151522%, rgba(151, 151, 151, 1) 99.99691456725405%)`,
    padding: `8px`,
    margin: `0px 0px 0px 24px`,
  };
  const Image2ScreenMobile = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -0.004113656489262577%, rgba(151, 151, 151, 1) 99.99588600506732%)`,
    padding: `4px`,
    margin: `0px 0px 0px 6px`,
  };
  const [Image2StateStyles, Image2StateApi] = useSpring(() => ({
    from: eval('Image2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Image3ScreenDesktop = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -3.0616171314629196e-15%, rgba(151, 151, 151, 1) 99.99999999999997%)`,
    padding: `10px`,
    margin: `0px 0px 0px 24px`,
  };
  const Image3ScreenTablet = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -0.00308524237151522%, rgba(151, 151, 151, 1) 99.99691456725405%)`,
    padding: `10px`,
    margin: `0px 0px 0px 24px`,
  };
  const Image3ScreenMobile = {
    background: `linear-gradient(180deg, rgba(255, 255, 255, 1) -0.004113656489262577%, rgba(151, 151, 151, 1) 99.99588600506732%)`,
    padding: `4px`,
    margin: `0px 0px 0px 6px`,
  };
  const [Image3StateStyles, Image3StateApi] = useSpring(() => ({
    from: eval('Image3' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const DiscoverSecScreenDesktop = {
    padding: `90px 180px 0px 180px`,
    margin: `50px 0px 0px 0px`,
    width: '1440px',
  };
  const DiscoverSecScreenTablet = {
    padding: `90px 80px 0px 80px`,
    margin: `50px 0px 0px 0px`,
    width: 'unset',
  };
  const DiscoverSecScreenMobile = {
    padding: `20px 30px 0px 30px`,
    margin: `30px 0px 0px 0px`,
    width: `375px`,
  };
  const [DiscoverSecStateStyles, DiscoverSecStateApi] = useSpring(() => ({
    from: eval('DiscoverSec' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Frame127ScreenDesktop = { padding: `0px 100px 0px 0px` };
  const Frame127ScreenTablet = { padding: `0px 0px 0px 0px` };
  const Frame127ScreenMobile = { padding: `0px 0px 0px 0px` };
  const [Frame127StateStyles, Frame127StateApi] = useSpring(() => ({
    from: eval('Frame127' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Frame1261ScreenDesktop = { width: '980px' };
  const Frame1261ScreenTablet = { width: `608px` };
  const Frame1261ScreenMobile = { width: 'unset' };
  const [Frame1261StateStyles, Frame1261StateApi] = useSpring(() => ({
    from: eval('Frame1261' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const DiscoverTheSpan1ScreenDesktop = {
    fontSize: `64px`,
    lineHeight: `56px`,
  };
  const DiscoverTheSpan1ScreenTablet = { fontSize: `56px`, lineHeight: `52px` };
  const DiscoverTheSpan1ScreenMobile = { fontSize: `30px`, lineHeight: `30px` };
  const [DiscoverTheSpan1StateStyles, DiscoverTheSpan1StateApi] = useSpring(
    () => ({
      from: eval('DiscoverTheSpan1' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const DiscoverTheSpan2ScreenDesktop = {
    fontSize: `64px`,
    lineHeight: `56px`,
  };
  const DiscoverTheSpan2ScreenTablet = { fontSize: `56px`, lineHeight: `52px` };
  const DiscoverTheSpan2ScreenMobile = { fontSize: `30px`, lineHeight: `30px` };
  const [DiscoverTheSpan2StateStyles, DiscoverTheSpan2StateApi] = useSpring(
    () => ({
      from: eval('DiscoverTheSpan2' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const DiscoverTheSpan3ScreenDesktop = {
    fontSize: `64px`,
    lineHeight: `56px`,
  };
  const DiscoverTheSpan3ScreenTablet = { fontSize: `56px`, lineHeight: `52px` };
  const DiscoverTheSpan3ScreenMobile = { fontSize: `30px`, lineHeight: `30px` };
  const [DiscoverTheSpan3StateStyles, DiscoverTheSpan3StateApi] = useSpring(
    () => ({
      from: eval('DiscoverTheSpan3' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const DiscoverTheScreenDesktop = { fontSize: `64px`, lineHeight: `56px` };
  const DiscoverTheScreenTablet = { fontSize: `56px`, lineHeight: `52px` };
  const DiscoverTheScreenMobile = { fontSize: `30px`, lineHeight: `30px` };
  const [DiscoverTheStateStyles, DiscoverTheStateApi] = useSpring(() => ({
    from: eval('DiscoverThe' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const ImportYourDifferenScreenDesktop = {
    fontSize: `20px`,
    lineHeight: `30px`,
    width: `622.49px`,
  };
  const ImportYourDifferenScreenTablet = {
    fontSize: `20px`,
    lineHeight: `30px`,
    width: '608px',
  };
  const ImportYourDifferenScreenMobile = {
    fontSize: `16px`,
    lineHeight: `26px`,
    width: '315px',
  };
  const [ImportYourDifferenStateStyles, ImportYourDifferenStateApi] = useSpring(
    () => ({
      from: eval('ImportYourDifferen' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const LearnMore1ScreenDesktop = { width: `980px` };
  const LearnMore1ScreenTablet = { width: '608px' };
  const LearnMore1ScreenMobile = { width: '315px' };
  const [LearnMore1StateStyles, LearnMore1StateApi] = useSpring(() => ({
    from: eval('LearnMore1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const About1ScreenDesktop = { fontSize: `20px` };
  const About1ScreenTablet = { fontSize: `20px` };
  const About1ScreenMobile = { fontSize: `16px` };
  const [About1StateStyles, About1StateApi] = useSpring(() => ({
    from: eval('About1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Link2ScreenDesktop = { fontSize: `20px` };
  const Link2ScreenTablet = { fontSize: `20px` };
  const Link2ScreenMobile = { fontSize: `16px` };
  const [Link2StateStyles, Link2StateApi] = useSpring(() => ({
    from: eval('Link2' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const BtmImageScreenDesktop = { margin: `50px 0px 0px 0px` };
  const BtmImageScreenTablet = { margin: `50px 0px 0px 0px` };
  const BtmImageScreenMobile = { margin: `30px 0px 0px 0px` };
  const [BtmImageStateStyles, BtmImageStateApi] = useSpring(() => ({
    from: eval('BtmImage' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const Sec4ImageScreenDesktop = { width: `1440px` };
  const Sec4ImageScreenTablet = { width: `1440px` };
  const Sec4ImageScreenMobile = { width: `375px` };
  const [Sec4ImageStateStyles, Sec4ImageStateApi] = useSpring(() => ({
    from: eval('Sec4Image' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const switchStateToScreenDesktop = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    HeroContentStateApi.start({
      ...HeroContentScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroDesktopStateApi.start({
      ...HeroDesktopScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroContent1StateApi.start({
      ...HeroContent1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ActionsIconStateApi.start({
      ...ActionsIconScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroTitleStateApi.start({
      ...HeroTitleScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheBetterWayForStateApi.start({
      ...TheBetterWayForScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NeoFromQuestAiEmStateApi.start({
      ...NeoFromQuestAiEmScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec2StateApi.start({
      ...Sec2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DividerStateApi.start({
      ...DividerScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame126StateApi.start({
      ...Frame126ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblemStateApi.start({
      ...TheProblemScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec21StateApi.start({
      ...Sec21ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem1StateApi.start({
      ...TheProblem1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ProblemsStateApi.start({
      ...ProblemsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BuildBoldPointsStateApi.start({
      ...BuildBoldPointsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card1StateApi.start({
      ...Card1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    CardStateApi.start({
      ...CardScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTeamStateApi.start({
      ...IconTeamScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExistingStateApi.start({
      ...MakeExistingScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting1StateApi.start({
      ...MakeExisting1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card2StateApi.start({
      ...Card2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card3StateApi.start({
      ...Card3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTimelineStateApi.start({
      ...IconTimelineScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting2StateApi.start({
      ...MakeExisting2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting3StateApi.start({
      ...MakeExisting3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card31StateApi.start({
      ...Card31ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card4StateApi.start({
      ...Card4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TeamIconStateApi.start({
      ...TeamIconScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting4StateApi.start({
      ...MakeExisting4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting5StateApi.start({
      ...MakeExisting5ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec3StateApi.start({
      ...Sec3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    StatementStateApi.start({
      ...StatementScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    QuestIsChangingTheGaStateApi.start({
      ...QuestIsChangingTheGaScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FrontEndSubtitleStateApi.start({
      ...FrontEndSubtitleScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4StateApi.start({
      ...Sec4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem2StateApi.start({
      ...TheProblem2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsStateApi.start({
      ...BulletsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRowStateApi.start({
      ...BulletsRowScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint1StateApi.start({
      ...BulletPoint1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconsStateApi.start({
      ...IconsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FigmaStateApi.start({
      ...FigmaScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Logo2StateApi.start({
      ...Logo2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    GithubStateApi.start({
      ...GithubScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem3StateApi.start({
      ...TheProblem3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem4StateApi.start({
      ...TheProblem4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint2StateApi.start({
      ...BulletPoint2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Icons1StateApi.start({
      ...Icons1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    JsStateApi.start({
      ...JsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TsStateApi.start({
      ...TsScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    React1StateApi.start({
      ...React1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NextStateApi.start({
      ...NextScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem5StateApi.start({
      ...TheProblem5ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem6StateApi.start({
      ...TheProblem6ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow1StateApi.start({
      ...BulletsRow1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow2StateApi.start({
      ...BulletsRow2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem7StateApi.start({
      ...TheProblem7ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem8StateApi.start({
      ...TheProblem8ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgenciesStateApi.start({
      ...ForAgenciesScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DevicesStateApi.start({
      ...DevicesScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MobileStateApi.start({
      ...MobileScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TabletStateApi.start({
      ...TabletScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DesktopStateApi.start({
      ...DesktopScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint11StateApi.start({
      ...BulletPoint11ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TurboIconStateApi.start({
      ...TurboIconScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem9StateApi.start({
      ...TheProblem9ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem10StateApi.start({
      ...TheProblem10ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies1StateApi.start({
      ...ForAgencies1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow3StateApi.start({
      ...BulletsRow3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint4StateApi.start({
      ...BulletPoint4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImgWorkspacesStateApi.start({
      ...ImgWorkspacesScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem11StateApi.start({
      ...TheProblem11ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem12StateApi.start({
      ...TheProblem12ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies2StateApi.start({
      ...ForAgencies2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint6StateApi.start({
      ...BulletPoint6ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ScreenShot20220922AtStateApi.start({
      ...ScreenShot20220922AtScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraTStateApi.start({
      ...ZebraTScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraMStateApi.start({
      ...ZebraMScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem13StateApi.start({
      ...TheProblem13ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem14StateApi.start({
      ...TheProblem14ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies3StateApi.start({
      ...ForAgencies3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BannerStateApi.start({
      ...BannerScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SpecialPricingStateApi.start({
      ...SpecialPricingScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem15StateApi.start({
      ...TheProblem15ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem16StateApi.start({
      ...TheProblem16ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies4StateApi.start({
      ...ForAgencies4ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ButtonOutlinedStateApi.start({
      ...ButtonOutlinedScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesStateApi.start({
      ...SamplesScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BoxStateApi.start({
      ...BoxScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesContentStateApi.start({
      ...SamplesContentScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LeftSideStateApi.start({
      ...LeftSideScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SubtitleStateApi.start({
      ...SubtitleScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TryItHeadlineStateApi.start({
      ...TryItHeadlineScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLauncStateApi.start({
      ...TakeDesignToLauncScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLaunc1StateApi.start({
      ...TakeDesignToLaunc1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMoreStateApi.start({
      ...LearnMoreScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    AboutStateApi.start({
      ...AboutScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link1StateApi.start({
      ...Link1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    RightSideStateApi.start({
      ...RightSideScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image1StateApi.start({
      ...Image1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image2StateApi.start({
      ...Image2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image3StateApi.start({
      ...Image3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverSecStateApi.start({
      ...DiscoverSecScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame127StateApi.start({
      ...Frame127ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame1261StateApi.start({
      ...Frame1261ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan1StateApi.start({
      ...DiscoverTheSpan1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan2StateApi.start({
      ...DiscoverTheSpan2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan3StateApi.start({
      ...DiscoverTheSpan3ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheStateApi.start({
      ...DiscoverTheScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImportYourDifferenStateApi.start({
      ...ImportYourDifferenScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMore1StateApi.start({
      ...LearnMore1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    About1StateApi.start({
      ...About1ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link2StateApi.start({
      ...Link2ScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BtmImageStateApi.start({
      ...BtmImageScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4ImageStateApi.start({
      ...Sec4ImageScreenDesktop,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToScreenTablet = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    HeroContentStateApi.start({
      ...HeroContentScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroDesktopStateApi.start({
      ...HeroDesktopScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroContent1StateApi.start({
      ...HeroContent1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ActionsIconStateApi.start({
      ...ActionsIconScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroTitleStateApi.start({
      ...HeroTitleScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheBetterWayForStateApi.start({
      ...TheBetterWayForScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NeoFromQuestAiEmStateApi.start({
      ...NeoFromQuestAiEmScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec2StateApi.start({
      ...Sec2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DividerStateApi.start({
      ...DividerScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame126StateApi.start({
      ...Frame126ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblemStateApi.start({
      ...TheProblemScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec21StateApi.start({
      ...Sec21ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem1StateApi.start({
      ...TheProblem1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ProblemsStateApi.start({
      ...ProblemsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BuildBoldPointsStateApi.start({
      ...BuildBoldPointsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card1StateApi.start({
      ...Card1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    CardStateApi.start({
      ...CardScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTeamStateApi.start({
      ...IconTeamScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExistingStateApi.start({
      ...MakeExistingScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting1StateApi.start({
      ...MakeExisting1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card2StateApi.start({
      ...Card2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card3StateApi.start({
      ...Card3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTimelineStateApi.start({
      ...IconTimelineScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting2StateApi.start({
      ...MakeExisting2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting3StateApi.start({
      ...MakeExisting3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card31StateApi.start({
      ...Card31ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card4StateApi.start({
      ...Card4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TeamIconStateApi.start({
      ...TeamIconScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting4StateApi.start({
      ...MakeExisting4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting5StateApi.start({
      ...MakeExisting5ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec3StateApi.start({
      ...Sec3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    StatementStateApi.start({
      ...StatementScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    QuestIsChangingTheGaStateApi.start({
      ...QuestIsChangingTheGaScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FrontEndSubtitleStateApi.start({
      ...FrontEndSubtitleScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4StateApi.start({
      ...Sec4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem2StateApi.start({
      ...TheProblem2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsStateApi.start({
      ...BulletsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRowStateApi.start({
      ...BulletsRowScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint1StateApi.start({
      ...BulletPoint1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconsStateApi.start({
      ...IconsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FigmaStateApi.start({
      ...FigmaScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Logo2StateApi.start({
      ...Logo2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    GithubStateApi.start({
      ...GithubScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem3StateApi.start({
      ...TheProblem3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem4StateApi.start({
      ...TheProblem4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint2StateApi.start({
      ...BulletPoint2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Icons1StateApi.start({
      ...Icons1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    JsStateApi.start({
      ...JsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TsStateApi.start({
      ...TsScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    React1StateApi.start({
      ...React1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NextStateApi.start({
      ...NextScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem5StateApi.start({
      ...TheProblem5ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem6StateApi.start({
      ...TheProblem6ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow1StateApi.start({
      ...BulletsRow1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow2StateApi.start({
      ...BulletsRow2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem7StateApi.start({
      ...TheProblem7ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem8StateApi.start({
      ...TheProblem8ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgenciesStateApi.start({
      ...ForAgenciesScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DevicesStateApi.start({
      ...DevicesScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MobileStateApi.start({
      ...MobileScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TabletStateApi.start({
      ...TabletScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DesktopStateApi.start({
      ...DesktopScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint11StateApi.start({
      ...BulletPoint11ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TurboIconStateApi.start({
      ...TurboIconScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem9StateApi.start({
      ...TheProblem9ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem10StateApi.start({
      ...TheProblem10ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies1StateApi.start({
      ...ForAgencies1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow3StateApi.start({
      ...BulletsRow3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint4StateApi.start({
      ...BulletPoint4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImgWorkspacesStateApi.start({
      ...ImgWorkspacesScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem11StateApi.start({
      ...TheProblem11ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem12StateApi.start({
      ...TheProblem12ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies2StateApi.start({
      ...ForAgencies2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint6StateApi.start({
      ...BulletPoint6ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ScreenShot20220922AtStateApi.start({
      ...ScreenShot20220922AtScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraTStateApi.start({
      ...ZebraTScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraMStateApi.start({
      ...ZebraMScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem13StateApi.start({
      ...TheProblem13ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem14StateApi.start({
      ...TheProblem14ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies3StateApi.start({
      ...ForAgencies3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BannerStateApi.start({
      ...BannerScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SpecialPricingStateApi.start({
      ...SpecialPricingScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem15StateApi.start({
      ...TheProblem15ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem16StateApi.start({
      ...TheProblem16ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies4StateApi.start({
      ...ForAgencies4ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ButtonOutlinedStateApi.start({
      ...ButtonOutlinedScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesStateApi.start({
      ...SamplesScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BoxStateApi.start({
      ...BoxScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesContentStateApi.start({
      ...SamplesContentScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LeftSideStateApi.start({
      ...LeftSideScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SubtitleStateApi.start({
      ...SubtitleScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TryItHeadlineStateApi.start({
      ...TryItHeadlineScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLauncStateApi.start({
      ...TakeDesignToLauncScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLaunc1StateApi.start({
      ...TakeDesignToLaunc1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMoreStateApi.start({
      ...LearnMoreScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    AboutStateApi.start({
      ...AboutScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link1StateApi.start({
      ...Link1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    RightSideStateApi.start({
      ...RightSideScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image1StateApi.start({
      ...Image1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image2StateApi.start({
      ...Image2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image3StateApi.start({
      ...Image3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverSecStateApi.start({
      ...DiscoverSecScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame127StateApi.start({
      ...Frame127ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame1261StateApi.start({
      ...Frame1261ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan1StateApi.start({
      ...DiscoverTheSpan1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan2StateApi.start({
      ...DiscoverTheSpan2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan3StateApi.start({
      ...DiscoverTheSpan3ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheStateApi.start({
      ...DiscoverTheScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImportYourDifferenStateApi.start({
      ...ImportYourDifferenScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMore1StateApi.start({
      ...LearnMore1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    About1StateApi.start({
      ...About1ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link2StateApi.start({
      ...Link2ScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BtmImageStateApi.start({
      ...BtmImageScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4ImageStateApi.start({
      ...Sec4ImageScreenTablet,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToScreenMobile = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    HeroContentStateApi.start({
      ...HeroContentScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroDesktopStateApi.start({
      ...HeroDesktopScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroContent1StateApi.start({
      ...HeroContent1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ActionsIconStateApi.start({
      ...ActionsIconScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    HeroTitleStateApi.start({
      ...HeroTitleScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheBetterWayForStateApi.start({
      ...TheBetterWayForScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NeoFromQuestAiEmStateApi.start({
      ...NeoFromQuestAiEmScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec2StateApi.start({
      ...Sec2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DividerStateApi.start({
      ...DividerScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame126StateApi.start({
      ...Frame126ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblemStateApi.start({
      ...TheProblemScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec21StateApi.start({
      ...Sec21ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem1StateApi.start({
      ...TheProblem1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ProblemsStateApi.start({
      ...ProblemsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BuildBoldPointsStateApi.start({
      ...BuildBoldPointsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card1StateApi.start({
      ...Card1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    CardStateApi.start({
      ...CardScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTeamStateApi.start({
      ...IconTeamScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExistingStateApi.start({
      ...MakeExistingScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting1StateApi.start({
      ...MakeExisting1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card2StateApi.start({
      ...Card2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card3StateApi.start({
      ...Card3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconTimelineStateApi.start({
      ...IconTimelineScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting2StateApi.start({
      ...MakeExisting2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting3StateApi.start({
      ...MakeExisting3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card31StateApi.start({
      ...Card31ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Card4StateApi.start({
      ...Card4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TeamIconStateApi.start({
      ...TeamIconScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting4StateApi.start({
      ...MakeExisting4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MakeExisting5StateApi.start({
      ...MakeExisting5ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec3StateApi.start({
      ...Sec3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    StatementStateApi.start({
      ...StatementScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    QuestIsChangingTheGaStateApi.start({
      ...QuestIsChangingTheGaScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FrontEndSubtitleStateApi.start({
      ...FrontEndSubtitleScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4StateApi.start({
      ...Sec4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem2StateApi.start({
      ...TheProblem2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsStateApi.start({
      ...BulletsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRowStateApi.start({
      ...BulletsRowScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint1StateApi.start({
      ...BulletPoint1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    IconsStateApi.start({
      ...IconsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    FigmaStateApi.start({
      ...FigmaScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Logo2StateApi.start({
      ...Logo2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    GithubStateApi.start({
      ...GithubScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem3StateApi.start({
      ...TheProblem3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem4StateApi.start({
      ...TheProblem4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint2StateApi.start({
      ...BulletPoint2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Icons1StateApi.start({
      ...Icons1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    JsStateApi.start({
      ...JsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TsStateApi.start({
      ...TsScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    React1StateApi.start({
      ...React1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    NextStateApi.start({
      ...NextScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem5StateApi.start({
      ...TheProblem5ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem6StateApi.start({
      ...TheProblem6ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow1StateApi.start({
      ...BulletsRow1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow2StateApi.start({
      ...BulletsRow2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem7StateApi.start({
      ...TheProblem7ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem8StateApi.start({
      ...TheProblem8ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgenciesStateApi.start({
      ...ForAgenciesScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DevicesStateApi.start({
      ...DevicesScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    MobileStateApi.start({
      ...MobileScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TabletStateApi.start({
      ...TabletScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DesktopStateApi.start({
      ...DesktopScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint11StateApi.start({
      ...BulletPoint11ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TurboIconStateApi.start({
      ...TurboIconScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem9StateApi.start({
      ...TheProblem9ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem10StateApi.start({
      ...TheProblem10ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies1StateApi.start({
      ...ForAgencies1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletsRow3StateApi.start({
      ...BulletsRow3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint4StateApi.start({
      ...BulletPoint4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImgWorkspacesStateApi.start({
      ...ImgWorkspacesScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem11StateApi.start({
      ...TheProblem11ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem12StateApi.start({
      ...TheProblem12ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies2StateApi.start({
      ...ForAgencies2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BulletPoint6StateApi.start({
      ...BulletPoint6ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ScreenShot20220922AtStateApi.start({
      ...ScreenShot20220922AtScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraTStateApi.start({
      ...ZebraTScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ZebraMStateApi.start({
      ...ZebraMScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem13StateApi.start({
      ...TheProblem13ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem14StateApi.start({
      ...TheProblem14ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies3StateApi.start({
      ...ForAgencies3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BannerStateApi.start({
      ...BannerScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SpecialPricingStateApi.start({
      ...SpecialPricingScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem15StateApi.start({
      ...TheProblem15ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TheProblem16StateApi.start({
      ...TheProblem16ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ForAgencies4StateApi.start({
      ...ForAgencies4ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ButtonOutlinedStateApi.start({
      ...ButtonOutlinedScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesStateApi.start({
      ...SamplesScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BoxStateApi.start({
      ...BoxScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SamplesContentStateApi.start({
      ...SamplesContentScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LeftSideStateApi.start({
      ...LeftSideScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    SubtitleStateApi.start({
      ...SubtitleScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TryItHeadlineStateApi.start({
      ...TryItHeadlineScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLauncStateApi.start({
      ...TakeDesignToLauncScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    TakeDesignToLaunc1StateApi.start({
      ...TakeDesignToLaunc1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMoreStateApi.start({
      ...LearnMoreScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    AboutStateApi.start({
      ...AboutScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link1StateApi.start({
      ...Link1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    RightSideStateApi.start({
      ...RightSideScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image1StateApi.start({
      ...Image1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image2StateApi.start({
      ...Image2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Image3StateApi.start({
      ...Image3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverSecStateApi.start({
      ...DiscoverSecScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame127StateApi.start({
      ...Frame127ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Frame1261StateApi.start({
      ...Frame1261ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan1StateApi.start({
      ...DiscoverTheSpan1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan2StateApi.start({
      ...DiscoverTheSpan2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheSpan3StateApi.start({
      ...DiscoverTheSpan3ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    DiscoverTheStateApi.start({
      ...DiscoverTheScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    ImportYourDifferenStateApi.start({
      ...ImportYourDifferenScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    LearnMore1StateApi.start({
      ...LearnMore1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    About1StateApi.start({
      ...About1ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Link2StateApi.start({
      ...Link2ScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    BtmImageStateApi.start({
      ...BtmImageScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Sec4ImageStateApi.start({
      ...Sec4ImageScreenMobile,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };
  return (
    <ScreenDesktop>
      <HeroBg data={data}>
        <HeroContent data={data} style={{ ...HeroContentStateStyles }}>
          <HeroDesktop data={data} style={{ ...HeroDesktopStateStyles }}>
            <HeroAll>
              <HeroContent1 data={data} style={{ ...HeroContent1StateStyles }}>
                <ActionsIcon
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_Actions_Icon.png`}
                  loading="lazy"
                  alt={'Actions Icon'}
                  style={{ ...ActionsIconStateStyles }}
                />
                <HeroTitle data={data} style={{ ...HeroTitleStateStyles }}>
                  <TheBetterWayFor
                    data={data}
                    onClick={() => {
                      switchStateToScreenTablet(750, 250, 'easeOutQuart');
                      fns.setCurrentVariant('ScreenTablet');
                    }}
                    style={{ ...TheBetterWayForStateStyles }}
                  >
                    {`Build and iterate on your product faster than ever`}
                  </TheBetterWayFor>
                  <NeoFromQuestAiEm
                    data={data}
                    style={{ ...NeoFromQuestAiEmStateStyles }}
                  >
                    {`Generate React components with clean, extendable code. Iterating your UI is as simple as updating your Figma designs.`}
                  </NeoFromQuestAiEm>
                </HeroTitle>
              </HeroContent1>
            </HeroAll>
          </HeroDesktop>
        </HeroContent>
      </HeroBg>
      <Sec2 data={data} style={{ ...Sec2StateStyles }}>
        <Divider data={data} style={{ ...DividerStateStyles }}></Divider>
        <Frame126 data={data} style={{ ...Frame126StateStyles }}>
          <TheProblem data={data} style={{ ...TheProblemStateStyles }}>
            {`Startups want to do more, faster with less`}
          </TheProblem>
          <Sec21 data={data} style={{ ...Sec21StateStyles }}>
            <TheProblem1 data={data} style={{ ...TheProblem1StateStyles }}>
              <Problems data={data} style={{ ...ProblemsStateStyles }}>
                <BuildBoldPoints
                  data={data}
                  style={{ ...BuildBoldPointsStateStyles }}
                >
                  <Card1 data={data} style={{ ...Card1StateStyles }}>
                    <Card data={data} style={{ ...CardStateStyles }}>
                      <IconTeam
                        data={data}
                        src={`./assets/images/img/imgtest/Startups_icon_team.png`}
                        loading="lazy"
                        alt={'icon team'}
                        style={{ ...IconTeamStateStyles }}
                      />
                      <MakeExisting
                        data={data}
                        style={{ ...MakeExistingStateStyles }}
                      >
                        {`Get to market fast`}
                      </MakeExisting>
                      <MakeExisting1
                        data={data}
                        style={{ ...MakeExisting1StateStyles }}
                      >
                        {`The best way to prove your idea is to get it out there fast to grab your market or fundraise`}
                      </MakeExisting1>
                    </Card>
                  </Card1>
                  <Card2 data={data} style={{ ...Card2StateStyles }}>
                    <Card3 data={data} style={{ ...Card3StateStyles }}>
                      <IconTimeline
                        data={data}
                        src={`./assets/images/img/imgtest/Startups_icon_timeline.png`}
                        loading="lazy"
                        alt={'icon timeline'}
                        style={{ ...IconTimelineStateStyles }}
                      />
                      <MakeExisting2
                        data={data}
                        style={{ ...MakeExisting2StateStyles }}
                      >
                        {`Iterate fast`}
                      </MakeExisting2>
                      <MakeExisting3
                        data={data}
                        style={{ ...MakeExisting3StateStyles }}
                      >
                        {`Quick updates based on your market learnings is the best way to get to product-market fit`}
                      </MakeExisting3>
                    </Card3>
                  </Card2>
                  <Card31 data={data} style={{ ...Card31StateStyles }}>
                    <Card4 data={data} style={{ ...Card4StateStyles }}>
                      <TeamIcon
                        data={data}
                        src={`./assets/images/img/imgtest/Startups_team_icon.png`}
                        loading="lazy"
                        alt={'team_icon'}
                        style={{ ...TeamIconStateStyles }}
                      />
                      <MakeExisting4
                        data={data}
                        style={{ ...MakeExisting4StateStyles }}
                      >
                        {`Few dev resources`}
                      </MakeExisting4>
                      <MakeExisting5
                        data={data}
                        style={{ ...MakeExisting5StateStyles }}
                      >
                        {data.currentVariant === 'ScreenTablet'
                          ? `Especially for specialist roles like frontend development

`
                          : data.currentVariant === 'ScreenMobile'
                          ? `Especially for specialist roles like frontend development

`
                          : `Especially for specialist roles like frontend development
`}
                      </MakeExisting5>
                    </Card4>
                  </Card31>
                </BuildBoldPoints>
              </Problems>
            </TheProblem1>
          </Sec21>
        </Frame126>
      </Sec2>
      <Sec3 data={data} style={{ ...Sec3StateStyles }}>
        <Divider1></Divider1>
        <Statement data={data} style={{ ...StatementStateStyles }}>
          <QuestIsChangingTheGa
            data={data}
            style={{ ...QuestIsChangingTheGaStateStyles }}
          >
            {`Quest is your game changer`}
          </QuestIsChangingTheGa>
          <FrontEndSubtitle
            data={data}
            style={{ ...FrontEndSubtitleStateStyles }}
          >
            {data.currentVariant === 'ScreenTablet'
              ? `Frontend automatically generated for you - so build and iterate fast. Clean and extendable code, so you can build anything on the backend with it - any API - json, graphQL. It is as if you have a frontend specialist on your team.`
              : data.currentVariant === 'ScreenMobile'
              ? `Frontend automatically generated for you - so build and iterate fast. Clean and extendable code, so you can build anything on the backend with it - any API - json, graphQL. It is as if you have a frontend specialist on your team.`
              : `Frontend automatically generated for you - so build and iterate fast. Clean and extendable code, so you can build anything on the backend with it - any API - json, graphQL. It is as if you have a frontend specialist on your team`}
          </FrontEndSubtitle>
        </Statement>
      </Sec3>
      <Sec4 data={data} style={{ ...Sec4StateStyles }}>
        <Divider2></Divider2>
        <TheProblem2 data={data} style={{ ...TheProblem2StateStyles }}>
          {`Features that supercharge your workflow`}
        </TheProblem2>
        <Bullets data={data} style={{ ...BulletsStateStyles }}>
          <BulletsRow data={data} style={{ ...BulletsRowStateStyles }}>
            <BulletPoint1 data={data} style={{ ...BulletPoint1StateStyles }}>
              <Icons data={data} style={{ ...IconsStateStyles }}>
                <Figma
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_figma.png`}
                  loading="lazy"
                  alt={'figma'}
                  style={{ ...FigmaStateStyles }}
                />
                <Logo2
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_logo_2.png`}
                  loading="lazy"
                  alt={'logo 2'}
                  style={{ ...Logo2StateStyles }}
                />
                <Github
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_github.png`}
                  loading="lazy"
                  alt={'github'}
                  style={{ ...GithubStateStyles }}
                />
              </Icons>
              <TheProblem3 data={data} style={{ ...TheProblem3StateStyles }}>
                <TheProblem4 data={data} style={{ ...TheProblem4StateStyles }}>
                  {`Integrates with the tools and libraries you love`}
                </TheProblem4>
              </TheProblem3>
            </BulletPoint1>
            <BulletPoint2 data={data} style={{ ...BulletPoint2StateStyles }}>
              <Icons1 data={data} style={{ ...Icons1StateStyles }}>
                <Js
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_js.png`}
                  loading="lazy"
                  alt={'js'}
                  style={{ ...JsStateStyles }}
                />
                <Ts
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_ts.png`}
                  loading="lazy"
                  alt={'ts'}
                  style={{ ...TsStateStyles }}
                />
                <React1
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_react.png`}
                  loading="lazy"
                  alt={'react'}
                  style={{ ...React1StateStyles }}
                />
                <Next
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_next.png`}
                  loading="lazy"
                  alt={'next'}
                  style={{ ...NextStateStyles }}
                />
              </Icons1>
              <TheProblem5 data={data} style={{ ...TheProblem5StateStyles }}>
                <TheProblem6 data={data} style={{ ...TheProblem6StateStyles }}>
                  {`Output formats of your choice`}
                </TheProblem6>
              </TheProblem5>
            </BulletPoint2>
          </BulletsRow>
          <BulletsRow1 data={data} style={{ ...BulletsRow1StateStyles }}>
            <BulletsRow2 data={data} style={{ ...BulletsRow2StateStyles }}>
              <TheProblem7 data={data} style={{ ...TheProblem7StateStyles }}>
                <TheProblem8 data={data} style={{ ...TheProblem8StateStyles }}>
                  {`Works on all devices`}
                </TheProblem8>
                <ForAgencies data={data} style={{ ...ForAgenciesStateStyles }}>
                  {`Support for multi-screen experiences without any coding`}
                </ForAgencies>
              </TheProblem7>
              <Devices data={data} style={{ ...DevicesStateStyles }}>
                <Mobile
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_mobile.png`}
                  loading="lazy"
                  alt={'mobile'}
                  style={{ ...MobileStateStyles }}
                />
                <Tablet
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_tablet.png`}
                  loading="lazy"
                  alt={'tablet'}
                  style={{ ...TabletStateStyles }}
                />
                <Desktop
                  data={data}
                  src={`./assets/images/img/imgtest/Startups_desktop.png`}
                  loading="lazy"
                  alt={'desktop'}
                  style={{ ...DesktopStateStyles }}
                />
              </Devices>
            </BulletsRow2>
            <BulletPoint11 data={data} style={{ ...BulletPoint11StateStyles }}>
              <TurboIcon
                data={data}
                src={`./assets/images/img/imgtest/Startups_Turbo_icon.png`}
                loading="lazy"
                alt={'Turbo icon'}
                style={{ ...TurboIconStateStyles }}
              />
              <TheProblem9 data={data} style={{ ...TheProblem9StateStyles }}>
                <TheProblem10
                  data={data}
                  style={{ ...TheProblem10StateStyles }}
                >
                  {`Fastrack your current workflow`}
                </TheProblem10>
                <ForAgencies1
                  data={data}
                  style={{ ...ForAgencies1StateStyles }}
                >
                  {`Build 10x faster and to get your MVP up and running in no time.`}
                </ForAgencies1>
              </TheProblem9>
            </BulletPoint11>
          </BulletsRow1>
          <BulletsRow3 data={data} style={{ ...BulletsRow3StateStyles }}>
            <BulletPoint4 data={data} style={{ ...BulletPoint4StateStyles }}>
              <ImgWorkspaces
                data={data}
                src={`${
                  data.currentVariant === 'ScreenTablet'
                    ? './assets/images/img/imgtest/Startups_img_workspaces_1.png'
                    : data.currentVariant === 'ScreenMobile'
                    ? './assets/images/img/imgtest/Startups_img_workspaces_2.png'
                    : './assets/images/img/imgtest/Startups_img_workspaces.png'
                }`}
                loading="lazy"
                alt={'img:workspaces'}
                style={{ ...ImgWorkspacesStateStyles }}
              />
              <TheProblem11 data={data} style={{ ...TheProblem11StateStyles }}>
                <TheProblem12
                  data={data}
                  style={{ ...TheProblem12StateStyles }}
                >
                  {`Organize your team`}
                </TheProblem12>
                <ForAgencies2
                  data={data}
                  style={{ ...ForAgencies2StateStyles }}
                >
                  {`Organize your team into workspaces and collaborate better with internal or external teams`}
                </ForAgencies2>
              </TheProblem11>
            </BulletPoint4>
            <BulletPoint6 data={data} style={{ ...BulletPoint6StateStyles }}>
              <ScreenShot20220922At
                data={data}
                src={`./assets/images/img/imgtest/Startups_Screen_Shot_2022_09_22_at_2_46_1.png`}
                loading="lazy"
                alt={'Screen Shot 2022-09-22 at 2.46 1'}
                style={{ ...ScreenShot20220922AtStateStyles }}
              />
              {false && (
                <ZebraT data={data} style={{ ...ZebraTStateStyles }}></ZebraT>
              )}
              {false && (
                <ZebraM data={data} style={{ ...ZebraMStateStyles }}></ZebraM>
              )}
              <TheProblem13 data={data} style={{ ...TheProblem13StateStyles }}>
                <TheProblem14
                  data={data}
                  style={{ ...TheProblem14StateStyles }}
                >
                  {`Responsive with Auto layout `}
                </TheProblem14>
                <ForAgencies3
                  data={data}
                  style={{ ...ForAgencies3StateStyles }}
                >
                  {`Responsiveness built-in automatically into the components generated`}
                </ForAgencies3>
              </TheProblem13>
            </BulletPoint6>
          </BulletsRow3>
        </Bullets>
      </Sec4>
      <Banner data={data} style={{ ...BannerStateStyles }}>
        <SpecialPricing data={data} style={{ ...SpecialPricingStateStyles }}>
          <TheProblem15 data={data} style={{ ...TheProblem15StateStyles }}>
            <TheProblem16 data={data} style={{ ...TheProblem16StateStyles }}>
              {`80% off for Startups`}
            </TheProblem16>
            <ForAgencies4 data={data} style={{ ...ForAgencies4StateStyles }}>
              {`Startups who have raised < $1M USD in funding or have <$500K USD in annual revenues get special pricing`}
            </ForAgencies4>
          </TheProblem15>
          <ButtonOutlined
            variant="outlined"
            size="large"
            color="info"
            data={data}
            style={{ ...ButtonOutlinedStateStyles }}
          >
            {' '}
            Sign Up Now{' '}
          </ButtonOutlined>
        </SpecialPricing>
      </Banner>
      <Samples data={data} style={{ ...SamplesStateStyles }}>
        <Box data={data} style={{ ...BoxStateStyles }}>
          <SamplesContent data={data} style={{ ...SamplesContentStateStyles }}>
            <LeftSide data={data} style={{ ...LeftSideStateStyles }}>
              <Subtitle data={data} style={{ ...SubtitleStateStyles }}>
                <ActionsIcon1
                  src={`./assets/images/img/imgtest/Startups_Actions_Icon_1.png`}
                  loading="lazy"
                  alt={'Actions Icon'}
                />
                <NewWay>{`Design & Code`}</NewWay>
              </Subtitle>
              <TryItHeadline
                data={data}
                style={{ ...TryItHeadlineStateStyles }}
              >
                <SeeHow>
                  <Frame125>
                    <TakeDesignToLaunc
                      data={data}
                      style={{ ...TakeDesignToLauncStateStyles }}
                    >
                      {`Check out some`}
                    </TakeDesignToLaunc>
                    <TakeDesignToLaunc1
                      data={data}
                      style={{ ...TakeDesignToLaunc1StateStyles }}
                    >
                      {`samples`}
                    </TakeDesignToLaunc1>
                  </Frame125>
                </SeeHow>
                <LearnMore data={data} style={{ ...LearnMoreStateStyles }}>
                  <About data={data} style={{ ...AboutStateStyles }}>
                    {data.currentVariant === 'ScreenTablet'
                      ? `Visit our `
                      : data.currentVariant === 'ScreenMobile'
                      ? `Visit our `
                      : `Visit our`}
                  </About>
                  <Link1
                    href="#"
                    underline="hover"
                    data={data}
                    style={{ ...Link1StateStyles }}
                  >
                    samples page.
                  </Link1>
                </LearnMore>
              </TryItHeadline>
            </LeftSide>
            <RightSide data={data} style={{ ...RightSideStateStyles }}>
              <Image1 data={data} style={{ ...Image1StateStyles }}>
                <Thumb></Thumb>
              </Image1>
              <Image2 data={data} style={{ ...Image2StateStyles }}>
                <Thumb1></Thumb1>
              </Image2>
              <Image3 data={data} style={{ ...Image3StateStyles }}>
                <Thumb2></Thumb2>
              </Image3>
            </RightSide>
          </SamplesContent>
        </Box>
      </Samples>
      <DiscoverSec data={data} style={{ ...DiscoverSecStateStyles }}>
        <Frame127 data={data} style={{ ...Frame127StateStyles }}>
          <Frame1261 data={data} style={{ ...Frame1261StateStyles }}>
            <Subtitle1>
              <ActionsIcon2
                src={`./assets/images/img/imgtest/Startups_Actions_Icon_2.png`}
                loading="lazy"
                alt={'Actions Icon'}
              />
              <NeoFromQuestAiEm1>{`THE FUTURE of frontend`}</NeoFromQuestAiEm1>
            </Subtitle1>
            <DiscoverThe data={data} style={{ ...DiscoverTheStateStyles }}>
              <DiscoverTheSpan1
                data={data}
                style={{ ...DiscoverTheSpan1StateStyles }}
              >{`Join the `}</DiscoverTheSpan1>
              <DiscoverTheSpan2
                data={data}
                style={{ ...DiscoverTheSpan2StateStyles }}
              >{`future`}</DiscoverTheSpan2>
              <DiscoverTheSpan3
                data={data}
                style={{ ...DiscoverTheSpan3StateStyles }}
              >{` & build products at rapid speed`}</DiscoverTheSpan3>
            </DiscoverThe>
            <ImportYourDifferen
              data={data}
              style={{ ...ImportYourDifferenStateStyles }}
            >
              {`The low-code movement is helping companies of all sizes remove redundant work. Quest enables you to build software products faster and go to market faster than ever.`}
            </ImportYourDifferen>
            <LearnMore1 data={data} style={{ ...LearnMore1StateStyles }}>
              <About1 data={data} style={{ ...About1StateStyles }}>
                {`Check out our`}
              </About1>
              <Link2
                href="#"
                underline="hover"
                data={data}
                style={{ ...Link2StateStyles }}
              >
                sample projects.
              </Link2>
            </LearnMore1>
            <ButtonOutlined1 variant="outlined" size="large" color="primary">
              {' '}
              Sign Up Now{' '}
            </ButtonOutlined1>
          </Frame1261>
        </Frame127>
      </DiscoverSec>
      <BtmImage data={data} style={{ ...BtmImageStateStyles }}>
        <Sec4Image data={data} style={{ ...Sec4ImageStateStyles }}></Sec4Image>
      </BtmImage>
    </ScreenDesktop>
  );
}

export default Startups;
