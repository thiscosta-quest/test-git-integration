/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';
import useImageUploadTest from 'components/ImageUploadTest/useImageUploadTest';

const Property1Default = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `9px 60px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
  width: 'fit-content',
});

const ImgFrame4 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundImage:
      data.currentVariant === 'Property1Variant2'
        ? `url(assets/images/imageuploadtest_img_Frame4_1.png)`
        : data.currentVariant === 'Property1Variant3'
        ? `url(assets/images/imageuploadtest_img_Frame4_2.png)`
        : `url(assets/images/imageuploadtest_img_Frame4.png)`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    height: `137px`,
    width: `160px`,
    margin: `0px`,
    overflow: `hidden`,
  }))
);

const Frame5 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `10px 0px 0px 0px`,
});

const Frame3 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `416.41px`,
  margin: `0px`,
});

const ImgQ3DCurrentView2 = styled('img')({
  height: `171.41px`,
  width: `171.41px`,
  objectFit: `cover`,
  flexGrow: `1`,
  margin: `0px`,
});

const Frame1 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  width: `235px`,
  margin: `0px 0px 0px 10px`,
});

const EngineeringStandup = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ theme, data }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: theme.typography['Typography']['Body 2'].fontStyle,
    fontFamily: theme.typography['Typography']['Body 2'].fontFamily,
    fontWeight: theme.typography['Typography']['Body 2'].fontWeight,
    fontSize: theme.typography['Typography']['Body 2'].fontSize,
    letterSpacing: theme.typography['Typography']['Body 2'].letterSpacing,
    textDecoration: theme.typography['Typography']['Body 2'].textDecoration,
    lineHeight: theme.typography['Typography']['Body 2'].lineHeight,
    textTransform: theme.typography['Typography']['Body 2'].textTransform,
    flexGrow: `1`,
    margin: `0px`,
  }))
);

const PlaylistAddCheck = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 2px`,
  overflow: `hidden`,
});

const Vector = styled('img')({
  height: `8.67px`,
  width: `12.67px`,
  margin: `0px`,
});

const Q3DCurrentView21 = styled('img')({
  height: `31.47px`,
  width: `31.47px`,
  objectFit: `cover`,
  margin: `10px 0px 0px 0px`,
});

function ImageUploadTest(props) {
  const { data, fns } = useImageUploadTest();

  const ImgFrame4Property1Default = { height: `137px`, width: `160px` };
  const ImgFrame4Property1Variant2 = { height: `148px`, width: `191px` };
  const ImgFrame4Property1Variant3 = { height: `150px`, width: `175px` };
  const [ImgFrame4StateStyles, ImgFrame4StateApi] = useSpring(() => ({
    from: eval('ImgFrame4' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const EngineeringStandupProperty1Default = { color: `rgba(0, 0, 0, 1)` };
  const EngineeringStandupProperty1Variant2 = {
    color: `rgba(107, 104, 255, 1)`,
  };
  const EngineeringStandupProperty1Variant3 = { color: `rgba(214, 41, 93, 1)` };
  const [EngineeringStandupStateStyles, EngineeringStandupStateApi] = useSpring(
    () => ({
      from: eval('EngineeringStandup' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const switchStateToProperty1Default = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    ImgFrame4StateApi.start({
      ...ImgFrame4Property1Default,
      delay,
      config: { duration, easing: easings[easing] },
    });
    EngineeringStandupStateApi.start({
      ...EngineeringStandupProperty1Default,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToProperty1Variant2 = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    ImgFrame4StateApi.start({
      ...ImgFrame4Property1Variant2,
      delay,
      config: { duration, easing: easings[easing] },
    });
    EngineeringStandupStateApi.start({
      ...EngineeringStandupProperty1Variant2,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToProperty1Variant3 = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    ImgFrame4StateApi.start({
      ...ImgFrame4Property1Variant3,
      delay,
      config: { duration, easing: easings[easing] },
    });
    EngineeringStandupStateApi.start({
      ...EngineeringStandupProperty1Variant3,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };
  return (
    <Property1Default>
      <ImgFrame4
        onClick={() => {
          switchStateToProperty1Default(750, 250, 'easeOutQuart');
          fns.setCurrentVariant('Property1Default');
        }}
        data={data}
        style={{ ...ImgFrame4StateStyles }}
      ></ImgFrame4>
      <Frame5>
        <Frame3>
          <ImgQ3DCurrentView2
            onClick={() => {
              switchStateToProperty1Variant3(750, 250, 'easeOutQuart');
              fns.setCurrentVariant('Property1Variant3');
            }}
            src={`${
              data.currentVariant === 'Property1Variant2'
                ? 'assets/images/imageuploadtest_img_Q_3D_Current_View2_1.png'
                : data.currentVariant === 'Property1Variant3'
                ? 'assets/images/imageuploadtest_img_Q_3D_Current_View2_2.png'
                : 'assets/images/imageuploadtest_img_Q_3D_Current_View2.png'
            }`}
            loading="lazy"
            alt={'img:Q_3D-Current-View2'}
          />
          <Frame1>
            <EngineeringStandup
              data={data}
              onClick={() => {
                switchStateToProperty1Variant2(750, 250, 'easeOutQuart');
                fns.setCurrentVariant('Property1Variant2');
              }}
              style={{ ...EngineeringStandupStateStyles }}
            >
              {`Engineering Standup`}
            </EngineeringStandup>
            <PlaylistAddCheck>
              <Vector
                src={`assets/images/imageuploadtest_Vector.png`}
                loading="lazy"
                alt={'Vector'}
              />
              <Q3DCurrentView21
                src={`assets/images/imageuploadtest_Q_3D_Current_View2_1.png`}
                loading="lazy"
                alt={'Q_3D-Current-View2 1'}
              />
            </PlaylistAddCheck>
          </Frame1>
        </Frame3>
      </Frame5>
    </Property1Default>
  );
}

export default ImageUploadTest;
